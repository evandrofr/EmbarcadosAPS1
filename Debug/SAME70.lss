
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014c4  00400000  00400000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  004014c4  004014c4  000114c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000cfc  20400000  004014cc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000c0  20400cfc  004021c8  00020cfc  2**2
                  ALLOC
  4 .stack        00002004  20400dbc  00402288  00020cfc  2**0
                  ALLOC
  5 .heap         00000200  20402dc0  0040428c  00020cfc  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020cfc  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020d2a  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000d424  00000000  00000000  00020d83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001c02  00000000  00000000  0002e1a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002a13  00000000  00000000  0002fda9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005b8  00000000  00000000  000327bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000688  00000000  00000000  00032d74  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0001cca6  00000000  00000000  000333fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000074b0  00000000  00000000  000500a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0008987b  00000000  00000000  00057552  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000de8  00000000  00000000  000e0dd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	c0 2d 40 20 41 09 40 00 3d 09 40 00 3d 09 40 00     .-@ A.@.=.@.=.@.
  400010:	3d 09 40 00 3d 09 40 00 3d 09 40 00 00 00 00 00     =.@.=.@.=.@.....
	...
  40002c:	3d 09 40 00 3d 09 40 00 00 00 00 00 3d 09 40 00     =.@.=.@.....=.@.
  40003c:	3d 09 40 00 3d 09 40 00 3d 09 40 00 3d 09 40 00     =.@.=.@.=.@.=.@.
  40004c:	3d 09 40 00 3d 09 40 00 3d 09 40 00 3d 09 40 00     =.@.=.@.=.@.=.@.
  40005c:	3d 09 40 00 3d 09 40 00 00 00 00 00 a5 04 40 00     =.@.=.@.......@.
  40006c:	b9 04 40 00 cd 04 40 00 3d 09 40 00 3d 09 40 00     ..@...@.=.@.=.@.
  40007c:	3d 09 40 00 e1 04 40 00 f5 04 40 00 3d 09 40 00     =.@...@...@.=.@.
  40008c:	3d 09 40 00 3d 09 40 00 3d 09 40 00 3d 09 40 00     =.@.=.@.=.@.=.@.
  40009c:	3d 09 40 00 3d 09 40 00 3d 09 40 00 3d 09 40 00     =.@.=.@.=.@.=.@.
  4000ac:	3d 09 40 00 3d 09 40 00 3d 09 40 00 3d 09 40 00     =.@.=.@.=.@.=.@.
  4000bc:	3d 09 40 00 3d 09 40 00 3d 09 40 00 3d 09 40 00     =.@.=.@.=.@.=.@.
  4000cc:	3d 09 40 00 00 00 00 00 3d 09 40 00 00 00 00 00     =.@.....=.@.....
  4000dc:	3d 09 40 00 3d 09 40 00 3d 09 40 00 3d 09 40 00     =.@.=.@.=.@.=.@.
  4000ec:	3d 09 40 00 3d 09 40 00 3d 09 40 00 3d 09 40 00     =.@.=.@.=.@.=.@.
  4000fc:	3d 09 40 00 3d 09 40 00 3d 09 40 00 3d 09 40 00     =.@.=.@.=.@.=.@.
  40010c:	3d 09 40 00 3d 09 40 00 00 00 00 00 00 00 00 00     =.@.=.@.........
  40011c:	00 00 00 00 3d 09 40 00 3d 09 40 00 3d 09 40 00     ....=.@.=.@.=.@.
  40012c:	3d 09 40 00 3d 09 40 00 00 00 00 00 3d 09 40 00     =.@.=.@.....=.@.
  40013c:	3d 09 40 00                                         =.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400cfc 	.word	0x20400cfc
  40015c:	00000000 	.word	0x00000000
  400160:	004014cc 	.word	0x004014cc

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	004014cc 	.word	0x004014cc
  4001a0:	20400d00 	.word	0x20400d00
  4001a4:	004014cc 	.word	0x004014cc
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400b15 	.word	0x00400b15
  4001f8:	004005a5 	.word	0x004005a5
  4001fc:	004005f9 	.word	0x004005f9
  400200:	00400609 	.word	0x00400609
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400619 	.word	0x00400619
  400210:	00400509 	.word	0x00400509
  400214:	00400541 	.word	0x00400541
  400218:	00400a09 	.word	0x00400a09

0040021c <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  40021c:	6301      	str	r1, [r0, #48]	; 0x30
  40021e:	4770      	bx	lr

00400220 <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  400220:	6341      	str	r1, [r0, #52]	; 0x34
  400222:	4770      	bx	lr

00400224 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
  400224:	6442      	str	r2, [r0, #68]	; 0x44

#if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM || SAMV71 || SAMV70 || SAME70 || SAMS70)
	switch (ul_type) {
  400226:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  40022a:	d03a      	beq.n	4002a2 <pio_set_peripheral+0x7e>
  40022c:	d813      	bhi.n	400256 <pio_set_peripheral+0x32>
  40022e:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  400232:	d025      	beq.n	400280 <pio_set_peripheral+0x5c>
  400234:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400238:	d10a      	bne.n	400250 <pio_set_peripheral+0x2c>

		ul_sr = p_pio->PIO_ABCDSR[1];
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
		break;
	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABCDSR[0];
  40023a:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  40023c:	4313      	orrs	r3, r2
  40023e:	6703      	str	r3, [r0, #112]	; 0x70

		ul_sr = p_pio->PIO_ABCDSR[1];
  400240:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400242:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400244:	400b      	ands	r3, r1
  400246:	ea23 0302 	bic.w	r3, r3, r2
  40024a:	6743      	str	r3, [r0, #116]	; 0x74
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
  40024c:	6042      	str	r2, [r0, #4]
  40024e:	4770      	bx	lr
	switch (ul_type) {
  400250:	2900      	cmp	r1, #0
  400252:	d1fb      	bne.n	40024c <pio_set_peripheral+0x28>
  400254:	4770      	bx	lr
  400256:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  40025a:	d021      	beq.n	4002a0 <pio_set_peripheral+0x7c>
  40025c:	d809      	bhi.n	400272 <pio_set_peripheral+0x4e>
  40025e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400262:	d1f3      	bne.n	40024c <pio_set_peripheral+0x28>
		ul_sr = p_pio->PIO_ABCDSR[0];
  400264:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] = (ul_mask | ul_sr);
  400266:	4313      	orrs	r3, r2
  400268:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  40026a:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  40026c:	4313      	orrs	r3, r2
  40026e:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  400270:	e7ec      	b.n	40024c <pio_set_peripheral+0x28>
	switch (ul_type) {
  400272:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400276:	d013      	beq.n	4002a0 <pio_set_peripheral+0x7c>
  400278:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  40027c:	d010      	beq.n	4002a0 <pio_set_peripheral+0x7c>
  40027e:	e7e5      	b.n	40024c <pio_set_peripheral+0x28>
{
  400280:	b410      	push	{r4}
		ul_sr = p_pio->PIO_ABCDSR[0];
  400282:	6f01      	ldr	r1, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  400284:	6f04      	ldr	r4, [r0, #112]	; 0x70
  400286:	43d3      	mvns	r3, r2
  400288:	4021      	ands	r1, r4
  40028a:	461c      	mov	r4, r3
  40028c:	4019      	ands	r1, r3
  40028e:	6701      	str	r1, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  400290:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] &= (~ul_mask & ul_sr);
  400292:	6f41      	ldr	r1, [r0, #116]	; 0x74
  400294:	400b      	ands	r3, r1
  400296:	4023      	ands	r3, r4
  400298:	6743      	str	r3, [r0, #116]	; 0x74
	p_pio->PIO_PDR = ul_mask;
  40029a:	6042      	str	r2, [r0, #4]
}
  40029c:	f85d 4b04 	ldr.w	r4, [sp], #4
  4002a0:	4770      	bx	lr
		ul_sr = p_pio->PIO_ABCDSR[0];
  4002a2:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABCDSR[0] &= (~ul_mask & ul_sr);
  4002a4:	6f01      	ldr	r1, [r0, #112]	; 0x70
  4002a6:	400b      	ands	r3, r1
  4002a8:	ea23 0302 	bic.w	r3, r3, r2
  4002ac:	6703      	str	r3, [r0, #112]	; 0x70
		ul_sr = p_pio->PIO_ABCDSR[1];
  4002ae:	6f43      	ldr	r3, [r0, #116]	; 0x74
		p_pio->PIO_ABCDSR[1] = (ul_mask | ul_sr);
  4002b0:	4313      	orrs	r3, r2
  4002b2:	6743      	str	r3, [r0, #116]	; 0x74
		break;
  4002b4:	e7ca      	b.n	40024c <pio_set_peripheral+0x28>

004002b6 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  4002b6:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4002b8:	f012 0f01 	tst.w	r2, #1
  4002bc:	d10d      	bne.n	4002da <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  4002be:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  4002c0:	f012 0f0a 	tst.w	r2, #10
  4002c4:	d00b      	beq.n	4002de <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  4002c6:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  4002c8:	f012 0f02 	tst.w	r2, #2
  4002cc:	d109      	bne.n	4002e2 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  4002ce:	f012 0f08 	tst.w	r2, #8
  4002d2:	d008      	beq.n	4002e6 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  4002d4:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  4002d8:	e005      	b.n	4002e6 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  4002da:	6641      	str	r1, [r0, #100]	; 0x64
  4002dc:	e7f0      	b.n	4002c0 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  4002de:	6241      	str	r1, [r0, #36]	; 0x24
  4002e0:	e7f2      	b.n	4002c8 <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  4002e2:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  4002e6:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  4002e8:	6001      	str	r1, [r0, #0]
  4002ea:	4770      	bx	lr

004002ec <pio_set_output>:
{
  4002ec:	b410      	push	{r4}
  4002ee:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  4002f0:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  4002f2:	b94c      	cbnz	r4, 400308 <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  4002f4:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  4002f6:	b14b      	cbz	r3, 40030c <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  4002f8:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  4002fa:	b94a      	cbnz	r2, 400310 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  4002fc:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  4002fe:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400300:	6001      	str	r1, [r0, #0]
}
  400302:	f85d 4b04 	ldr.w	r4, [sp], #4
  400306:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400308:	6641      	str	r1, [r0, #100]	; 0x64
  40030a:	e7f4      	b.n	4002f6 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40030c:	6541      	str	r1, [r0, #84]	; 0x54
  40030e:	e7f4      	b.n	4002fa <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  400310:	6301      	str	r1, [r0, #48]	; 0x30
  400312:	e7f4      	b.n	4002fe <pio_set_output+0x12>

00400314 <pio_configure>:
{
  400314:	b570      	push	{r4, r5, r6, lr}
  400316:	b082      	sub	sp, #8
  400318:	4605      	mov	r5, r0
  40031a:	4616      	mov	r6, r2
  40031c:	461c      	mov	r4, r3
	switch (ul_type) {
  40031e:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
  400322:	d014      	beq.n	40034e <pio_configure+0x3a>
  400324:	d90a      	bls.n	40033c <pio_configure+0x28>
  400326:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  40032a:	d024      	beq.n	400376 <pio_configure+0x62>
  40032c:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400330:	d021      	beq.n	400376 <pio_configure+0x62>
  400332:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
  400336:	d017      	beq.n	400368 <pio_configure+0x54>
		return 0;
  400338:	2000      	movs	r0, #0
  40033a:	e01a      	b.n	400372 <pio_configure+0x5e>
	switch (ul_type) {
  40033c:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
  400340:	d005      	beq.n	40034e <pio_configure+0x3a>
  400342:	f1b1 5fc0 	cmp.w	r1, #402653184	; 0x18000000
  400346:	d002      	beq.n	40034e <pio_configure+0x3a>
  400348:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
  40034c:	d1f4      	bne.n	400338 <pio_configure+0x24>
		pio_set_peripheral(p_pio, ul_type, ul_mask);
  40034e:	4632      	mov	r2, r6
  400350:	4628      	mov	r0, r5
  400352:	4b11      	ldr	r3, [pc, #68]	; (400398 <pio_configure+0x84>)
  400354:	4798      	blx	r3
	if (ul_pull_up_enable) {
  400356:	f014 0f01 	tst.w	r4, #1
  40035a:	d102      	bne.n	400362 <pio_configure+0x4e>
		p_pio->PIO_PUDR = ul_mask;
  40035c:	662e      	str	r6, [r5, #96]	; 0x60
	return 1;
  40035e:	2001      	movs	r0, #1
  400360:	e007      	b.n	400372 <pio_configure+0x5e>
		p_pio->PIO_PUER = ul_mask;
  400362:	666e      	str	r6, [r5, #100]	; 0x64
	return 1;
  400364:	2001      	movs	r0, #1
  400366:	e004      	b.n	400372 <pio_configure+0x5e>
		pio_set_input(p_pio, ul_mask, ul_attribute);
  400368:	461a      	mov	r2, r3
  40036a:	4631      	mov	r1, r6
  40036c:	4b0b      	ldr	r3, [pc, #44]	; (40039c <pio_configure+0x88>)
  40036e:	4798      	blx	r3
	return 1;
  400370:	2001      	movs	r0, #1
}
  400372:	b002      	add	sp, #8
  400374:	bd70      	pop	{r4, r5, r6, pc}
		pio_set_output(p_pio, ul_mask, (ul_type == PIO_OUTPUT_1),
  400376:	f004 0301 	and.w	r3, r4, #1
  40037a:	9300      	str	r3, [sp, #0]
  40037c:	f3c4 0380 	ubfx	r3, r4, #2, #1
  400380:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
  400384:	bf14      	ite	ne
  400386:	2200      	movne	r2, #0
  400388:	2201      	moveq	r2, #1
  40038a:	4631      	mov	r1, r6
  40038c:	4628      	mov	r0, r5
  40038e:	4c04      	ldr	r4, [pc, #16]	; (4003a0 <pio_configure+0x8c>)
  400390:	47a0      	blx	r4
	return 1;
  400392:	2001      	movs	r0, #1
		break;
  400394:	e7ed      	b.n	400372 <pio_configure+0x5e>
  400396:	bf00      	nop
  400398:	00400225 	.word	0x00400225
  40039c:	004002b7 	.word	0x004002b7
  4003a0:	004002ed 	.word	0x004002ed

004003a4 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4003a4:	f012 0f10 	tst.w	r2, #16
  4003a8:	d012      	beq.n	4003d0 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4003aa:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4003ae:	f012 0f20 	tst.w	r2, #32
  4003b2:	d007      	beq.n	4003c4 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4003b4:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4003b8:	f012 0f40 	tst.w	r2, #64	; 0x40
  4003bc:	d005      	beq.n	4003ca <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4003be:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4003c2:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4003c4:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4003c8:	e7f6      	b.n	4003b8 <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4003ca:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4003ce:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4003d0:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4003d4:	4770      	bx	lr

004003d6 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4003d6:	6401      	str	r1, [r0, #64]	; 0x40
  4003d8:	4770      	bx	lr

004003da <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4003da:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4003dc:	4770      	bx	lr

004003de <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4003de:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4003e0:	4770      	bx	lr
	...

004003e4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4003e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4003e8:	4604      	mov	r4, r0
  4003ea:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4003ec:	4b0e      	ldr	r3, [pc, #56]	; (400428 <pio_handler_process+0x44>)
  4003ee:	4798      	blx	r3
  4003f0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4003f2:	4620      	mov	r0, r4
  4003f4:	4b0d      	ldr	r3, [pc, #52]	; (40042c <pio_handler_process+0x48>)
  4003f6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4003f8:	4005      	ands	r5, r0
  4003fa:	d013      	beq.n	400424 <pio_handler_process+0x40>
  4003fc:	4c0c      	ldr	r4, [pc, #48]	; (400430 <pio_handler_process+0x4c>)
  4003fe:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400402:	e003      	b.n	40040c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400404:	42b4      	cmp	r4, r6
  400406:	d00d      	beq.n	400424 <pio_handler_process+0x40>
  400408:	3410      	adds	r4, #16
		while (status != 0) {
  40040a:	b15d      	cbz	r5, 400424 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40040c:	6820      	ldr	r0, [r4, #0]
  40040e:	4540      	cmp	r0, r8
  400410:	d1f8      	bne.n	400404 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400412:	6861      	ldr	r1, [r4, #4]
  400414:	4229      	tst	r1, r5
  400416:	d0f5      	beq.n	400404 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400418:	68e3      	ldr	r3, [r4, #12]
  40041a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40041c:	6863      	ldr	r3, [r4, #4]
  40041e:	ea25 0503 	bic.w	r5, r5, r3
  400422:	e7ef      	b.n	400404 <pio_handler_process+0x20>
  400424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400428:	004003db 	.word	0x004003db
  40042c:	004003df 	.word	0x004003df
  400430:	20400d18 	.word	0x20400d18

00400434 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400436:	4c18      	ldr	r4, [pc, #96]	; (400498 <pio_handler_set+0x64>)
  400438:	6826      	ldr	r6, [r4, #0]
  40043a:	2e06      	cmp	r6, #6
  40043c:	d82a      	bhi.n	400494 <pio_handler_set+0x60>
  40043e:	f04f 0c00 	mov.w	ip, #0
  400442:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400444:	4f15      	ldr	r7, [pc, #84]	; (40049c <pio_handler_set+0x68>)
  400446:	e004      	b.n	400452 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400448:	3401      	adds	r4, #1
  40044a:	b2e4      	uxtb	r4, r4
  40044c:	46a4      	mov	ip, r4
  40044e:	42a6      	cmp	r6, r4
  400450:	d309      	bcc.n	400466 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400452:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400454:	0125      	lsls	r5, r4, #4
  400456:	597d      	ldr	r5, [r7, r5]
  400458:	428d      	cmp	r5, r1
  40045a:	d1f5      	bne.n	400448 <pio_handler_set+0x14>
  40045c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400460:	686d      	ldr	r5, [r5, #4]
  400462:	4295      	cmp	r5, r2
  400464:	d1f0      	bne.n	400448 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400466:	4d0d      	ldr	r5, [pc, #52]	; (40049c <pio_handler_set+0x68>)
  400468:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  40046c:	eb05 040e 	add.w	r4, r5, lr
  400470:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400474:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400476:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400478:	9906      	ldr	r1, [sp, #24]
  40047a:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  40047c:	3601      	adds	r6, #1
  40047e:	4566      	cmp	r6, ip
  400480:	d005      	beq.n	40048e <pio_handler_set+0x5a>
  400482:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400484:	461a      	mov	r2, r3
  400486:	4b06      	ldr	r3, [pc, #24]	; (4004a0 <pio_handler_set+0x6c>)
  400488:	4798      	blx	r3

	return 0;
  40048a:	2000      	movs	r0, #0
  40048c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  40048e:	4902      	ldr	r1, [pc, #8]	; (400498 <pio_handler_set+0x64>)
  400490:	600e      	str	r6, [r1, #0]
  400492:	e7f6      	b.n	400482 <pio_handler_set+0x4e>
		return 1;
  400494:	2001      	movs	r0, #1
}
  400496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400498:	20400d88 	.word	0x20400d88
  40049c:	20400d18 	.word	0x20400d18
  4004a0:	004003a5 	.word	0x004003a5

004004a4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4004a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4004a6:	210a      	movs	r1, #10
  4004a8:	4801      	ldr	r0, [pc, #4]	; (4004b0 <PIOA_Handler+0xc>)
  4004aa:	4b02      	ldr	r3, [pc, #8]	; (4004b4 <PIOA_Handler+0x10>)
  4004ac:	4798      	blx	r3
  4004ae:	bd08      	pop	{r3, pc}
  4004b0:	400e0e00 	.word	0x400e0e00
  4004b4:	004003e5 	.word	0x004003e5

004004b8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4004b8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4004ba:	210b      	movs	r1, #11
  4004bc:	4801      	ldr	r0, [pc, #4]	; (4004c4 <PIOB_Handler+0xc>)
  4004be:	4b02      	ldr	r3, [pc, #8]	; (4004c8 <PIOB_Handler+0x10>)
  4004c0:	4798      	blx	r3
  4004c2:	bd08      	pop	{r3, pc}
  4004c4:	400e1000 	.word	0x400e1000
  4004c8:	004003e5 	.word	0x004003e5

004004cc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4004cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4004ce:	210c      	movs	r1, #12
  4004d0:	4801      	ldr	r0, [pc, #4]	; (4004d8 <PIOC_Handler+0xc>)
  4004d2:	4b02      	ldr	r3, [pc, #8]	; (4004dc <PIOC_Handler+0x10>)
  4004d4:	4798      	blx	r3
  4004d6:	bd08      	pop	{r3, pc}
  4004d8:	400e1200 	.word	0x400e1200
  4004dc:	004003e5 	.word	0x004003e5

004004e0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4004e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4004e2:	2110      	movs	r1, #16
  4004e4:	4801      	ldr	r0, [pc, #4]	; (4004ec <PIOD_Handler+0xc>)
  4004e6:	4b02      	ldr	r3, [pc, #8]	; (4004f0 <PIOD_Handler+0x10>)
  4004e8:	4798      	blx	r3
  4004ea:	bd08      	pop	{r3, pc}
  4004ec:	400e1400 	.word	0x400e1400
  4004f0:	004003e5 	.word	0x004003e5

004004f4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4004f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4004f6:	2111      	movs	r1, #17
  4004f8:	4801      	ldr	r0, [pc, #4]	; (400500 <PIOE_Handler+0xc>)
  4004fa:	4b02      	ldr	r3, [pc, #8]	; (400504 <PIOE_Handler+0x10>)
  4004fc:	4798      	blx	r3
  4004fe:	bd08      	pop	{r3, pc}
  400500:	400e1600 	.word	0x400e1600
  400504:	004003e5 	.word	0x004003e5

00400508 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400508:	2803      	cmp	r0, #3
  40050a:	d011      	beq.n	400530 <pmc_mck_set_division+0x28>
  40050c:	2804      	cmp	r0, #4
  40050e:	d012      	beq.n	400536 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400510:	2802      	cmp	r0, #2
  400512:	bf0c      	ite	eq
  400514:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400518:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40051a:	4a08      	ldr	r2, [pc, #32]	; (40053c <pmc_mck_set_division+0x34>)
  40051c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40051e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400522:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400524:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400526:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400528:	f013 0f08 	tst.w	r3, #8
  40052c:	d0fb      	beq.n	400526 <pmc_mck_set_division+0x1e>
}
  40052e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400530:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400534:	e7f1      	b.n	40051a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400536:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40053a:	e7ee      	b.n	40051a <pmc_mck_set_division+0x12>
  40053c:	400e0600 	.word	0x400e0600

00400540 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400540:	4a17      	ldr	r2, [pc, #92]	; (4005a0 <pmc_switch_mck_to_pllack+0x60>)
  400542:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400544:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400548:	4318      	orrs	r0, r3
  40054a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40054c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40054e:	f013 0f08 	tst.w	r3, #8
  400552:	d10a      	bne.n	40056a <pmc_switch_mck_to_pllack+0x2a>
  400554:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400558:	4911      	ldr	r1, [pc, #68]	; (4005a0 <pmc_switch_mck_to_pllack+0x60>)
  40055a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40055c:	f012 0f08 	tst.w	r2, #8
  400560:	d103      	bne.n	40056a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400562:	3b01      	subs	r3, #1
  400564:	d1f9      	bne.n	40055a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400566:	2001      	movs	r0, #1
  400568:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40056a:	4a0d      	ldr	r2, [pc, #52]	; (4005a0 <pmc_switch_mck_to_pllack+0x60>)
  40056c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40056e:	f023 0303 	bic.w	r3, r3, #3
  400572:	f043 0302 	orr.w	r3, r3, #2
  400576:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400578:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40057a:	f013 0f08 	tst.w	r3, #8
  40057e:	d10a      	bne.n	400596 <pmc_switch_mck_to_pllack+0x56>
  400580:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400584:	4906      	ldr	r1, [pc, #24]	; (4005a0 <pmc_switch_mck_to_pllack+0x60>)
  400586:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400588:	f012 0f08 	tst.w	r2, #8
  40058c:	d105      	bne.n	40059a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40058e:	3b01      	subs	r3, #1
  400590:	d1f9      	bne.n	400586 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400592:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400594:	4770      	bx	lr
	return 0;
  400596:	2000      	movs	r0, #0
  400598:	4770      	bx	lr
  40059a:	2000      	movs	r0, #0
  40059c:	4770      	bx	lr
  40059e:	bf00      	nop
  4005a0:	400e0600 	.word	0x400e0600

004005a4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4005a4:	b9a0      	cbnz	r0, 4005d0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005a6:	480e      	ldr	r0, [pc, #56]	; (4005e0 <pmc_switch_mainck_to_xtal+0x3c>)
  4005a8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4005aa:	0209      	lsls	r1, r1, #8
  4005ac:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4005ae:	4a0d      	ldr	r2, [pc, #52]	; (4005e4 <pmc_switch_mainck_to_xtal+0x40>)
  4005b0:	401a      	ands	r2, r3
  4005b2:	4b0d      	ldr	r3, [pc, #52]	; (4005e8 <pmc_switch_mainck_to_xtal+0x44>)
  4005b4:	4313      	orrs	r3, r2
  4005b6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4005b8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4005ba:	4602      	mov	r2, r0
  4005bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4005be:	f013 0f01 	tst.w	r3, #1
  4005c2:	d0fb      	beq.n	4005bc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4005c4:	4a06      	ldr	r2, [pc, #24]	; (4005e0 <pmc_switch_mainck_to_xtal+0x3c>)
  4005c6:	6a11      	ldr	r1, [r2, #32]
  4005c8:	4b08      	ldr	r3, [pc, #32]	; (4005ec <pmc_switch_mainck_to_xtal+0x48>)
  4005ca:	430b      	orrs	r3, r1
  4005cc:	6213      	str	r3, [r2, #32]
  4005ce:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4005d0:	4903      	ldr	r1, [pc, #12]	; (4005e0 <pmc_switch_mainck_to_xtal+0x3c>)
  4005d2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4005d4:	4a06      	ldr	r2, [pc, #24]	; (4005f0 <pmc_switch_mainck_to_xtal+0x4c>)
  4005d6:	401a      	ands	r2, r3
  4005d8:	4b06      	ldr	r3, [pc, #24]	; (4005f4 <pmc_switch_mainck_to_xtal+0x50>)
  4005da:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4005dc:	620b      	str	r3, [r1, #32]
  4005de:	4770      	bx	lr
  4005e0:	400e0600 	.word	0x400e0600
  4005e4:	ffc8fffc 	.word	0xffc8fffc
  4005e8:	00370001 	.word	0x00370001
  4005ec:	01370000 	.word	0x01370000
  4005f0:	fec8fffc 	.word	0xfec8fffc
  4005f4:	01370002 	.word	0x01370002

004005f8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4005f8:	4b02      	ldr	r3, [pc, #8]	; (400604 <pmc_osc_is_ready_mainck+0xc>)
  4005fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4005fc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400600:	4770      	bx	lr
  400602:	bf00      	nop
  400604:	400e0600 	.word	0x400e0600

00400608 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400608:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40060c:	4b01      	ldr	r3, [pc, #4]	; (400614 <pmc_disable_pllack+0xc>)
  40060e:	629a      	str	r2, [r3, #40]	; 0x28
  400610:	4770      	bx	lr
  400612:	bf00      	nop
  400614:	400e0600 	.word	0x400e0600

00400618 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400618:	4b02      	ldr	r3, [pc, #8]	; (400624 <pmc_is_locked_pllack+0xc>)
  40061a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40061c:	f000 0002 	and.w	r0, r0, #2
  400620:	4770      	bx	lr
  400622:	bf00      	nop
  400624:	400e0600 	.word	0x400e0600

00400628 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400628:	283f      	cmp	r0, #63	; 0x3f
  40062a:	d81e      	bhi.n	40066a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40062c:	281f      	cmp	r0, #31
  40062e:	d80c      	bhi.n	40064a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400630:	4b11      	ldr	r3, [pc, #68]	; (400678 <pmc_enable_periph_clk+0x50>)
  400632:	699a      	ldr	r2, [r3, #24]
  400634:	2301      	movs	r3, #1
  400636:	4083      	lsls	r3, r0
  400638:	4393      	bics	r3, r2
  40063a:	d018      	beq.n	40066e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40063c:	2301      	movs	r3, #1
  40063e:	fa03 f000 	lsl.w	r0, r3, r0
  400642:	4b0d      	ldr	r3, [pc, #52]	; (400678 <pmc_enable_periph_clk+0x50>)
  400644:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400646:	2000      	movs	r0, #0
  400648:	4770      	bx	lr
		ul_id -= 32;
  40064a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40064c:	4b0a      	ldr	r3, [pc, #40]	; (400678 <pmc_enable_periph_clk+0x50>)
  40064e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400652:	2301      	movs	r3, #1
  400654:	4083      	lsls	r3, r0
  400656:	4393      	bics	r3, r2
  400658:	d00b      	beq.n	400672 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40065a:	2301      	movs	r3, #1
  40065c:	fa03 f000 	lsl.w	r0, r3, r0
  400660:	4b05      	ldr	r3, [pc, #20]	; (400678 <pmc_enable_periph_clk+0x50>)
  400662:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400666:	2000      	movs	r0, #0
  400668:	4770      	bx	lr
		return 1;
  40066a:	2001      	movs	r0, #1
  40066c:	4770      	bx	lr
	return 0;
  40066e:	2000      	movs	r0, #0
  400670:	4770      	bx	lr
  400672:	2000      	movs	r0, #0
}
  400674:	4770      	bx	lr
  400676:	bf00      	nop
  400678:	400e0600 	.word	0x400e0600

0040067c <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  40067c:	4770      	bx	lr
	...

00400680 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  400680:	4a10      	ldr	r2, [pc, #64]	; (4006c4 <pmc_enable_waitmode+0x44>)
  400682:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  400684:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400688:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  40068c:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  40068e:	6a11      	ldr	r1, [r2, #32]
  400690:	4b0d      	ldr	r3, [pc, #52]	; (4006c8 <pmc_enable_waitmode+0x48>)
  400692:	430b      	orrs	r3, r1
  400694:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400696:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400698:	f013 0f08 	tst.w	r3, #8
  40069c:	d0fb      	beq.n	400696 <pmc_enable_waitmode+0x16>
  40069e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4006a2:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4006a4:	3b01      	subs	r3, #1
  4006a6:	d1fc      	bne.n	4006a2 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4006a8:	4a06      	ldr	r2, [pc, #24]	; (4006c4 <pmc_enable_waitmode+0x44>)
  4006aa:	6a13      	ldr	r3, [r2, #32]
  4006ac:	f013 0f08 	tst.w	r3, #8
  4006b0:	d0fb      	beq.n	4006aa <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4006b2:	4a04      	ldr	r2, [pc, #16]	; (4006c4 <pmc_enable_waitmode+0x44>)
  4006b4:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4006b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4006ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4006be:	6713      	str	r3, [r2, #112]	; 0x70
  4006c0:	4770      	bx	lr
  4006c2:	bf00      	nop
  4006c4:	400e0600 	.word	0x400e0600
  4006c8:	00370004 	.word	0x00370004

004006cc <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4006cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  4006d0:	1e43      	subs	r3, r0, #1
  4006d2:	2b04      	cmp	r3, #4
  4006d4:	f200 8105 	bhi.w	4008e2 <pmc_sleep+0x216>
  4006d8:	e8df f013 	tbh	[pc, r3, lsl #1]
  4006dc:	00050005 	.word	0x00050005
  4006e0:	00130013 	.word	0x00130013
  4006e4:	00f4      	.short	0x00f4
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  4006e6:	4a80      	ldr	r2, [pc, #512]	; (4008e8 <pmc_sleep+0x21c>)
  4006e8:	6913      	ldr	r3, [r2, #16]
  4006ea:	f023 0304 	bic.w	r3, r3, #4
  4006ee:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  4006f0:	2201      	movs	r2, #1
  4006f2:	4b7e      	ldr	r3, [pc, #504]	; (4008ec <pmc_sleep+0x220>)
  4006f4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4006f6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4006fa:	b662      	cpsie	i
  __ASM volatile ("wfi");
  4006fc:	bf30      	wfi
  4006fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400702:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400704:	2803      	cmp	r0, #3
  400706:	bf0c      	ite	eq
  400708:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40070a:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  40070e:	4b78      	ldr	r3, [pc, #480]	; (4008f0 <pmc_sleep+0x224>)
  400710:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400712:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400714:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  400718:	2200      	movs	r2, #0
  40071a:	4b74      	ldr	r3, [pc, #464]	; (4008ec <pmc_sleep+0x220>)
  40071c:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  40071e:	2201      	movs	r2, #1
  400720:	4b74      	ldr	r3, [pc, #464]	; (4008f4 <pmc_sleep+0x228>)
  400722:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  400724:	4b74      	ldr	r3, [pc, #464]	; (4008f8 <pmc_sleep+0x22c>)
  400726:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  400728:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40072a:	4a74      	ldr	r2, [pc, #464]	; (4008fc <pmc_sleep+0x230>)
  40072c:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400730:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400732:	4a73      	ldr	r2, [pc, #460]	; (400900 <pmc_sleep+0x234>)
  400734:	433a      	orrs	r2, r7
  400736:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  400738:	f005 0903 	and.w	r9, r5, #3
  40073c:	f1b9 0f01 	cmp.w	r9, #1
  400740:	f240 8089 	bls.w	400856 <pmc_sleep+0x18a>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  400744:	f025 0103 	bic.w	r1, r5, #3
  400748:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  40074c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40074e:	461a      	mov	r2, r3
  400750:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400752:	f013 0f08 	tst.w	r3, #8
  400756:	d0fb      	beq.n	400750 <pmc_sleep+0x84>
	if (mckr & PMC_MCKR_PRES_Msk) {
  400758:	f011 0f70 	tst.w	r1, #112	; 0x70
  40075c:	d008      	beq.n	400770 <pmc_sleep+0xa4>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  40075e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  400762:	4b65      	ldr	r3, [pc, #404]	; (4008f8 <pmc_sleep+0x22c>)
  400764:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400766:	461a      	mov	r2, r3
  400768:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40076a:	f013 0f08 	tst.w	r3, #8
  40076e:	d0fb      	beq.n	400768 <pmc_sleep+0x9c>
	pmc_disable_pllack();
  400770:	4b64      	ldr	r3, [pc, #400]	; (400904 <pmc_sleep+0x238>)
  400772:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400774:	4a60      	ldr	r2, [pc, #384]	; (4008f8 <pmc_sleep+0x22c>)
  400776:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400778:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40077c:	d0fb      	beq.n	400776 <pmc_sleep+0xaa>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40077e:	4a5e      	ldr	r2, [pc, #376]	; (4008f8 <pmc_sleep+0x22c>)
  400780:	6a11      	ldr	r1, [r2, #32]
  400782:	4b61      	ldr	r3, [pc, #388]	; (400908 <pmc_sleep+0x23c>)
  400784:	400b      	ands	r3, r1
  400786:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40078a:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40078c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40078e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400792:	d0fb      	beq.n	40078c <pmc_sleep+0xc0>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  400794:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  400798:	4a58      	ldr	r2, [pc, #352]	; (4008fc <pmc_sleep+0x230>)
  40079a:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  40079c:	2c04      	cmp	r4, #4
  40079e:	d05c      	beq.n	40085a <pmc_sleep+0x18e>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4007a0:	4c52      	ldr	r4, [pc, #328]	; (4008ec <pmc_sleep+0x220>)
  4007a2:	2301      	movs	r3, #1
  4007a4:	7023      	strb	r3, [r4, #0]
  4007a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4007aa:	b662      	cpsie	i

		pmc_enable_waitmode();
  4007ac:	4b57      	ldr	r3, [pc, #348]	; (40090c <pmc_sleep+0x240>)
  4007ae:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4007b0:	b672      	cpsid	i
  4007b2:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4007b6:	2300      	movs	r3, #0
  4007b8:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4007ba:	f017 0f02 	tst.w	r7, #2
  4007be:	d055      	beq.n	40086c <pmc_sleep+0x1a0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007c0:	4a4d      	ldr	r2, [pc, #308]	; (4008f8 <pmc_sleep+0x22c>)
  4007c2:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4007c4:	4952      	ldr	r1, [pc, #328]	; (400910 <pmc_sleep+0x244>)
  4007c6:	4019      	ands	r1, r3
  4007c8:	4b52      	ldr	r3, [pc, #328]	; (400914 <pmc_sleep+0x248>)
  4007ca:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4007cc:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4007ce:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4007d0:	4b51      	ldr	r3, [pc, #324]	; (400918 <pmc_sleep+0x24c>)
  4007d2:	400b      	ands	r3, r1
  4007d4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4007d8:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  4007da:	4b50      	ldr	r3, [pc, #320]	; (40091c <pmc_sleep+0x250>)
  4007dc:	4033      	ands	r3, r6
  4007de:	2b00      	cmp	r3, #0
  4007e0:	d06e      	beq.n	4008c0 <pmc_sleep+0x1f4>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  4007e2:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4007e6:	4b44      	ldr	r3, [pc, #272]	; (4008f8 <pmc_sleep+0x22c>)
  4007e8:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  4007ea:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  4007ec:	f1b9 0f02 	cmp.w	r9, #2
  4007f0:	d104      	bne.n	4007fc <pmc_sleep+0x130>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4007f2:	4a41      	ldr	r2, [pc, #260]	; (4008f8 <pmc_sleep+0x22c>)
  4007f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007f6:	f013 0f02 	tst.w	r3, #2
  4007fa:	d0fb      	beq.n	4007f4 <pmc_sleep+0x128>
	mckr = PMC->PMC_MCKR;
  4007fc:	4a3e      	ldr	r2, [pc, #248]	; (4008f8 <pmc_sleep+0x22c>)
  4007fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  400804:	f005 0070 	and.w	r0, r5, #112	; 0x70
  400808:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40080a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40080c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40080e:	f013 0f08 	tst.w	r3, #8
  400812:	d0fb      	beq.n	40080c <pmc_sleep+0x140>
	EFC0->EEFC_FMR = fmr_setting;
  400814:	4b39      	ldr	r3, [pc, #228]	; (4008fc <pmc_sleep+0x230>)
  400816:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40081a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40081e:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400820:	461a      	mov	r2, r3
  400822:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400824:	f013 0f08 	tst.w	r3, #8
  400828:	d0fb      	beq.n	400822 <pmc_sleep+0x156>
	while (!(PMC->PMC_SR & pll_sr));
  40082a:	4a33      	ldr	r2, [pc, #204]	; (4008f8 <pmc_sleep+0x22c>)
  40082c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40082e:	420b      	tst	r3, r1
  400830:	d0fc      	beq.n	40082c <pmc_sleep+0x160>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  400832:	2200      	movs	r2, #0
  400834:	4b2f      	ldr	r3, [pc, #188]	; (4008f4 <pmc_sleep+0x228>)
  400836:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  400838:	4b39      	ldr	r3, [pc, #228]	; (400920 <pmc_sleep+0x254>)
  40083a:	681b      	ldr	r3, [r3, #0]
  40083c:	b11b      	cbz	r3, 400846 <pmc_sleep+0x17a>
			callback_clocks_restored();
  40083e:	4798      	blx	r3
			callback_clocks_restored = NULL;
  400840:	2200      	movs	r2, #0
  400842:	4b37      	ldr	r3, [pc, #220]	; (400920 <pmc_sleep+0x254>)
  400844:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  400846:	2201      	movs	r2, #1
  400848:	4b28      	ldr	r3, [pc, #160]	; (4008ec <pmc_sleep+0x220>)
  40084a:	701a      	strb	r2, [r3, #0]
  40084c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400850:	b662      	cpsie	i
  400852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  400856:	4629      	mov	r1, r5
  400858:	e77e      	b.n	400758 <pmc_sleep+0x8c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40085a:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  40085e:	6a11      	ldr	r1, [r2, #32]
  400860:	4b30      	ldr	r3, [pc, #192]	; (400924 <pmc_sleep+0x258>)
  400862:	400b      	ands	r3, r1
  400864:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400868:	6213      	str	r3, [r2, #32]
  40086a:	e799      	b.n	4007a0 <pmc_sleep+0xd4>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  40086c:	f017 0f01 	tst.w	r7, #1
  400870:	d0b3      	beq.n	4007da <pmc_sleep+0x10e>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  400872:	4b21      	ldr	r3, [pc, #132]	; (4008f8 <pmc_sleep+0x22c>)
  400874:	6a1b      	ldr	r3, [r3, #32]
  400876:	f013 0f01 	tst.w	r3, #1
  40087a:	d10b      	bne.n	400894 <pmc_sleep+0x1c8>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40087c:	491e      	ldr	r1, [pc, #120]	; (4008f8 <pmc_sleep+0x22c>)
  40087e:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  400880:	4a29      	ldr	r2, [pc, #164]	; (400928 <pmc_sleep+0x25c>)
  400882:	401a      	ands	r2, r3
  400884:	4b29      	ldr	r3, [pc, #164]	; (40092c <pmc_sleep+0x260>)
  400886:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400888:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40088a:	460a      	mov	r2, r1
  40088c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40088e:	f013 0f01 	tst.w	r3, #1
  400892:	d0fb      	beq.n	40088c <pmc_sleep+0x1c0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  400894:	4b18      	ldr	r3, [pc, #96]	; (4008f8 <pmc_sleep+0x22c>)
  400896:	6a1b      	ldr	r3, [r3, #32]
  400898:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40089c:	d108      	bne.n	4008b0 <pmc_sleep+0x1e4>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40089e:	4a16      	ldr	r2, [pc, #88]	; (4008f8 <pmc_sleep+0x22c>)
  4008a0:	6a11      	ldr	r1, [r2, #32]
  4008a2:	4b23      	ldr	r3, [pc, #140]	; (400930 <pmc_sleep+0x264>)
  4008a4:	430b      	orrs	r3, r1
  4008a6:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4008a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4008aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4008ae:	d0fb      	beq.n	4008a8 <pmc_sleep+0x1dc>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4008b0:	4a11      	ldr	r2, [pc, #68]	; (4008f8 <pmc_sleep+0x22c>)
  4008b2:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4008b4:	4b18      	ldr	r3, [pc, #96]	; (400918 <pmc_sleep+0x24c>)
  4008b6:	400b      	ands	r3, r1
  4008b8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4008bc:	6213      	str	r3, [r2, #32]
  4008be:	e78c      	b.n	4007da <pmc_sleep+0x10e>
	uint32_t pll_sr = 0;
  4008c0:	2100      	movs	r1, #0
  4008c2:	e793      	b.n	4007ec <pmc_sleep+0x120>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4008c4:	4a08      	ldr	r2, [pc, #32]	; (4008e8 <pmc_sleep+0x21c>)
  4008c6:	6913      	ldr	r3, [r2, #16]
  4008c8:	f043 0304 	orr.w	r3, r3, #4
  4008cc:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4008ce:	4a19      	ldr	r2, [pc, #100]	; (400934 <pmc_sleep+0x268>)
  4008d0:	4b19      	ldr	r3, [pc, #100]	; (400938 <pmc_sleep+0x26c>)
  4008d2:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  4008d4:	2201      	movs	r2, #1
  4008d6:	4b05      	ldr	r3, [pc, #20]	; (4008ec <pmc_sleep+0x220>)
  4008d8:	701a      	strb	r2, [r3, #0]
  4008da:	f3bf 8f5f 	dmb	sy
  4008de:	b662      	cpsie	i
  __ASM volatile ("wfi");
  4008e0:	bf30      	wfi
  4008e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4008e6:	bf00      	nop
  4008e8:	e000ed00 	.word	0xe000ed00
  4008ec:	2040000a 	.word	0x2040000a
  4008f0:	0040067d 	.word	0x0040067d
  4008f4:	20400d8c 	.word	0x20400d8c
  4008f8:	400e0600 	.word	0x400e0600
  4008fc:	400e0c00 	.word	0x400e0c00
  400900:	00370008 	.word	0x00370008
  400904:	00400609 	.word	0x00400609
  400908:	fec8ffff 	.word	0xfec8ffff
  40090c:	00400681 	.word	0x00400681
  400910:	fec8fffc 	.word	0xfec8fffc
  400914:	01370002 	.word	0x01370002
  400918:	ffc8ff87 	.word	0xffc8ff87
  40091c:	07ff0000 	.word	0x07ff0000
  400920:	20400d90 	.word	0x20400d90
  400924:	ffc8fffe 	.word	0xffc8fffe
  400928:	ffc8fffc 	.word	0xffc8fffc
  40092c:	00370001 	.word	0x00370001
  400930:	01370000 	.word	0x01370000
  400934:	a5000004 	.word	0xa5000004
  400938:	400e1810 	.word	0x400e1810

0040093c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40093c:	e7fe      	b.n	40093c <Dummy_Handler>
	...

00400940 <Reset_Handler>:
{
  400940:	b500      	push	{lr}
  400942:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400944:	4b25      	ldr	r3, [pc, #148]	; (4009dc <Reset_Handler+0x9c>)
  400946:	4a26      	ldr	r2, [pc, #152]	; (4009e0 <Reset_Handler+0xa0>)
  400948:	429a      	cmp	r2, r3
  40094a:	d010      	beq.n	40096e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40094c:	4b25      	ldr	r3, [pc, #148]	; (4009e4 <Reset_Handler+0xa4>)
  40094e:	4a23      	ldr	r2, [pc, #140]	; (4009dc <Reset_Handler+0x9c>)
  400950:	429a      	cmp	r2, r3
  400952:	d20c      	bcs.n	40096e <Reset_Handler+0x2e>
  400954:	3b01      	subs	r3, #1
  400956:	1a9b      	subs	r3, r3, r2
  400958:	f023 0303 	bic.w	r3, r3, #3
  40095c:	3304      	adds	r3, #4
  40095e:	4413      	add	r3, r2
  400960:	491f      	ldr	r1, [pc, #124]	; (4009e0 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400962:	f851 0b04 	ldr.w	r0, [r1], #4
  400966:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40096a:	429a      	cmp	r2, r3
  40096c:	d1f9      	bne.n	400962 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40096e:	4b1e      	ldr	r3, [pc, #120]	; (4009e8 <Reset_Handler+0xa8>)
  400970:	4a1e      	ldr	r2, [pc, #120]	; (4009ec <Reset_Handler+0xac>)
  400972:	429a      	cmp	r2, r3
  400974:	d20a      	bcs.n	40098c <Reset_Handler+0x4c>
  400976:	3b01      	subs	r3, #1
  400978:	1a9b      	subs	r3, r3, r2
  40097a:	f023 0303 	bic.w	r3, r3, #3
  40097e:	3304      	adds	r3, #4
  400980:	4413      	add	r3, r2
                *pDest++ = 0;
  400982:	2100      	movs	r1, #0
  400984:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400988:	4293      	cmp	r3, r2
  40098a:	d1fb      	bne.n	400984 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40098c:	4a18      	ldr	r2, [pc, #96]	; (4009f0 <Reset_Handler+0xb0>)
  40098e:	4b19      	ldr	r3, [pc, #100]	; (4009f4 <Reset_Handler+0xb4>)
  400990:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400994:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400996:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40099a:	fab3 f383 	clz	r3, r3
  40099e:	095b      	lsrs	r3, r3, #5
  4009a0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4009a2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4009a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4009a8:	2200      	movs	r2, #0
  4009aa:	4b13      	ldr	r3, [pc, #76]	; (4009f8 <Reset_Handler+0xb8>)
  4009ac:	701a      	strb	r2, [r3, #0]
	return flags;
  4009ae:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4009b0:	4a12      	ldr	r2, [pc, #72]	; (4009fc <Reset_Handler+0xbc>)
  4009b2:	6813      	ldr	r3, [r2, #0]
  4009b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4009b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4009ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4009be:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4009c2:	b129      	cbz	r1, 4009d0 <Reset_Handler+0x90>
		cpu_irq_enable();
  4009c4:	2201      	movs	r2, #1
  4009c6:	4b0c      	ldr	r3, [pc, #48]	; (4009f8 <Reset_Handler+0xb8>)
  4009c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4009ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4009ce:	b662      	cpsie	i
        __libc_init_array();
  4009d0:	4b0b      	ldr	r3, [pc, #44]	; (400a00 <Reset_Handler+0xc0>)
  4009d2:	4798      	blx	r3
        main();
  4009d4:	4b0b      	ldr	r3, [pc, #44]	; (400a04 <Reset_Handler+0xc4>)
  4009d6:	4798      	blx	r3
  4009d8:	e7fe      	b.n	4009d8 <Reset_Handler+0x98>
  4009da:	bf00      	nop
  4009dc:	20400000 	.word	0x20400000
  4009e0:	004014cc 	.word	0x004014cc
  4009e4:	20400cfc 	.word	0x20400cfc
  4009e8:	20400dbc 	.word	0x20400dbc
  4009ec:	20400cfc 	.word	0x20400cfc
  4009f0:	e000ed00 	.word	0xe000ed00
  4009f4:	00400000 	.word	0x00400000
  4009f8:	2040000a 	.word	0x2040000a
  4009fc:	e000ed88 	.word	0xe000ed88
  400a00:	0040130d 	.word	0x0040130d
  400a04:	00400e51 	.word	0x00400e51

00400a08 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400a08:	4b3b      	ldr	r3, [pc, #236]	; (400af8 <SystemCoreClockUpdate+0xf0>)
  400a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a0c:	f003 0303 	and.w	r3, r3, #3
  400a10:	2b01      	cmp	r3, #1
  400a12:	d01d      	beq.n	400a50 <SystemCoreClockUpdate+0x48>
  400a14:	b183      	cbz	r3, 400a38 <SystemCoreClockUpdate+0x30>
  400a16:	2b02      	cmp	r3, #2
  400a18:	d036      	beq.n	400a88 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  400a1a:	4b37      	ldr	r3, [pc, #220]	; (400af8 <SystemCoreClockUpdate+0xf0>)
  400a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a1e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a22:	2b70      	cmp	r3, #112	; 0x70
  400a24:	d05f      	beq.n	400ae6 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400a26:	4b34      	ldr	r3, [pc, #208]	; (400af8 <SystemCoreClockUpdate+0xf0>)
  400a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  400a2a:	4934      	ldr	r1, [pc, #208]	; (400afc <SystemCoreClockUpdate+0xf4>)
  400a2c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400a30:	680b      	ldr	r3, [r1, #0]
  400a32:	40d3      	lsrs	r3, r2
  400a34:	600b      	str	r3, [r1, #0]
  400a36:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400a38:	4b31      	ldr	r3, [pc, #196]	; (400b00 <SystemCoreClockUpdate+0xf8>)
  400a3a:	695b      	ldr	r3, [r3, #20]
  400a3c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400a40:	bf14      	ite	ne
  400a42:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400a46:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  400a4a:	4b2c      	ldr	r3, [pc, #176]	; (400afc <SystemCoreClockUpdate+0xf4>)
  400a4c:	601a      	str	r2, [r3, #0]
  400a4e:	e7e4      	b.n	400a1a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400a50:	4b29      	ldr	r3, [pc, #164]	; (400af8 <SystemCoreClockUpdate+0xf0>)
  400a52:	6a1b      	ldr	r3, [r3, #32]
  400a54:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a58:	d003      	beq.n	400a62 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  400a5a:	4a2a      	ldr	r2, [pc, #168]	; (400b04 <SystemCoreClockUpdate+0xfc>)
  400a5c:	4b27      	ldr	r3, [pc, #156]	; (400afc <SystemCoreClockUpdate+0xf4>)
  400a5e:	601a      	str	r2, [r3, #0]
  400a60:	e7db      	b.n	400a1a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400a62:	4a29      	ldr	r2, [pc, #164]	; (400b08 <SystemCoreClockUpdate+0x100>)
  400a64:	4b25      	ldr	r3, [pc, #148]	; (400afc <SystemCoreClockUpdate+0xf4>)
  400a66:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400a68:	4b23      	ldr	r3, [pc, #140]	; (400af8 <SystemCoreClockUpdate+0xf0>)
  400a6a:	6a1b      	ldr	r3, [r3, #32]
  400a6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400a70:	2b10      	cmp	r3, #16
  400a72:	d005      	beq.n	400a80 <SystemCoreClockUpdate+0x78>
  400a74:	2b20      	cmp	r3, #32
  400a76:	d1d0      	bne.n	400a1a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400a78:	4a22      	ldr	r2, [pc, #136]	; (400b04 <SystemCoreClockUpdate+0xfc>)
  400a7a:	4b20      	ldr	r3, [pc, #128]	; (400afc <SystemCoreClockUpdate+0xf4>)
  400a7c:	601a      	str	r2, [r3, #0]
          break;
  400a7e:	e7cc      	b.n	400a1a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400a80:	4a22      	ldr	r2, [pc, #136]	; (400b0c <SystemCoreClockUpdate+0x104>)
  400a82:	4b1e      	ldr	r3, [pc, #120]	; (400afc <SystemCoreClockUpdate+0xf4>)
  400a84:	601a      	str	r2, [r3, #0]
          break;
  400a86:	e7c8      	b.n	400a1a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400a88:	4b1b      	ldr	r3, [pc, #108]	; (400af8 <SystemCoreClockUpdate+0xf0>)
  400a8a:	6a1b      	ldr	r3, [r3, #32]
  400a8c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400a90:	d016      	beq.n	400ac0 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400a92:	4a1c      	ldr	r2, [pc, #112]	; (400b04 <SystemCoreClockUpdate+0xfc>)
  400a94:	4b19      	ldr	r3, [pc, #100]	; (400afc <SystemCoreClockUpdate+0xf4>)
  400a96:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400a98:	4b17      	ldr	r3, [pc, #92]	; (400af8 <SystemCoreClockUpdate+0xf0>)
  400a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  400a9c:	f003 0303 	and.w	r3, r3, #3
  400aa0:	2b02      	cmp	r3, #2
  400aa2:	d1ba      	bne.n	400a1a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400aa4:	4a14      	ldr	r2, [pc, #80]	; (400af8 <SystemCoreClockUpdate+0xf0>)
  400aa6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400aa8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  400aaa:	4814      	ldr	r0, [pc, #80]	; (400afc <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  400aac:	f3c1 410a 	ubfx	r1, r1, #16, #11
  400ab0:	6803      	ldr	r3, [r0, #0]
  400ab2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  400ab6:	b2d2      	uxtb	r2, r2
  400ab8:	fbb3 f3f2 	udiv	r3, r3, r2
  400abc:	6003      	str	r3, [r0, #0]
  400abe:	e7ac      	b.n	400a1a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400ac0:	4a11      	ldr	r2, [pc, #68]	; (400b08 <SystemCoreClockUpdate+0x100>)
  400ac2:	4b0e      	ldr	r3, [pc, #56]	; (400afc <SystemCoreClockUpdate+0xf4>)
  400ac4:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400ac6:	4b0c      	ldr	r3, [pc, #48]	; (400af8 <SystemCoreClockUpdate+0xf0>)
  400ac8:	6a1b      	ldr	r3, [r3, #32]
  400aca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400ace:	2b10      	cmp	r3, #16
  400ad0:	d005      	beq.n	400ade <SystemCoreClockUpdate+0xd6>
  400ad2:	2b20      	cmp	r3, #32
  400ad4:	d1e0      	bne.n	400a98 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  400ad6:	4a0b      	ldr	r2, [pc, #44]	; (400b04 <SystemCoreClockUpdate+0xfc>)
  400ad8:	4b08      	ldr	r3, [pc, #32]	; (400afc <SystemCoreClockUpdate+0xf4>)
  400ada:	601a      	str	r2, [r3, #0]
          break;
  400adc:	e7dc      	b.n	400a98 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  400ade:	4a0b      	ldr	r2, [pc, #44]	; (400b0c <SystemCoreClockUpdate+0x104>)
  400ae0:	4b06      	ldr	r3, [pc, #24]	; (400afc <SystemCoreClockUpdate+0xf4>)
  400ae2:	601a      	str	r2, [r3, #0]
          break;
  400ae4:	e7d8      	b.n	400a98 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  400ae6:	4a05      	ldr	r2, [pc, #20]	; (400afc <SystemCoreClockUpdate+0xf4>)
  400ae8:	6813      	ldr	r3, [r2, #0]
  400aea:	4909      	ldr	r1, [pc, #36]	; (400b10 <SystemCoreClockUpdate+0x108>)
  400aec:	fba1 1303 	umull	r1, r3, r1, r3
  400af0:	085b      	lsrs	r3, r3, #1
  400af2:	6013      	str	r3, [r2, #0]
  400af4:	4770      	bx	lr
  400af6:	bf00      	nop
  400af8:	400e0600 	.word	0x400e0600
  400afc:	2040000c 	.word	0x2040000c
  400b00:	400e1810 	.word	0x400e1810
  400b04:	00b71b00 	.word	0x00b71b00
  400b08:	003d0900 	.word	0x003d0900
  400b0c:	007a1200 	.word	0x007a1200
  400b10:	aaaaaaab 	.word	0xaaaaaaab

00400b14 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400b14:	4b12      	ldr	r3, [pc, #72]	; (400b60 <system_init_flash+0x4c>)
  400b16:	4298      	cmp	r0, r3
  400b18:	d911      	bls.n	400b3e <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400b1a:	4b12      	ldr	r3, [pc, #72]	; (400b64 <system_init_flash+0x50>)
  400b1c:	4298      	cmp	r0, r3
  400b1e:	d913      	bls.n	400b48 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400b20:	4b11      	ldr	r3, [pc, #68]	; (400b68 <system_init_flash+0x54>)
  400b22:	4298      	cmp	r0, r3
  400b24:	d914      	bls.n	400b50 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400b26:	4b11      	ldr	r3, [pc, #68]	; (400b6c <system_init_flash+0x58>)
  400b28:	4298      	cmp	r0, r3
  400b2a:	d915      	bls.n	400b58 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400b2c:	4b10      	ldr	r3, [pc, #64]	; (400b70 <system_init_flash+0x5c>)
  400b2e:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400b30:	bf94      	ite	ls
  400b32:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400b36:	4a0f      	ldrhi	r2, [pc, #60]	; (400b74 <system_init_flash+0x60>)
  400b38:	4b0f      	ldr	r3, [pc, #60]	; (400b78 <system_init_flash+0x64>)
  400b3a:	601a      	str	r2, [r3, #0]
  400b3c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400b3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400b42:	4b0d      	ldr	r3, [pc, #52]	; (400b78 <system_init_flash+0x64>)
  400b44:	601a      	str	r2, [r3, #0]
  400b46:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400b48:	4a0c      	ldr	r2, [pc, #48]	; (400b7c <system_init_flash+0x68>)
  400b4a:	4b0b      	ldr	r3, [pc, #44]	; (400b78 <system_init_flash+0x64>)
  400b4c:	601a      	str	r2, [r3, #0]
  400b4e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400b50:	4a0b      	ldr	r2, [pc, #44]	; (400b80 <system_init_flash+0x6c>)
  400b52:	4b09      	ldr	r3, [pc, #36]	; (400b78 <system_init_flash+0x64>)
  400b54:	601a      	str	r2, [r3, #0]
  400b56:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400b58:	4a0a      	ldr	r2, [pc, #40]	; (400b84 <system_init_flash+0x70>)
  400b5a:	4b07      	ldr	r3, [pc, #28]	; (400b78 <system_init_flash+0x64>)
  400b5c:	601a      	str	r2, [r3, #0]
  400b5e:	4770      	bx	lr
  400b60:	01312cff 	.word	0x01312cff
  400b64:	026259ff 	.word	0x026259ff
  400b68:	039386ff 	.word	0x039386ff
  400b6c:	04c4b3ff 	.word	0x04c4b3ff
  400b70:	05f5e0ff 	.word	0x05f5e0ff
  400b74:	04000500 	.word	0x04000500
  400b78:	400e0c00 	.word	0x400e0c00
  400b7c:	04000100 	.word	0x04000100
  400b80:	04000200 	.word	0x04000200
  400b84:	04000300 	.word	0x04000300

00400b88 <but_callback>:
		pio_set(PIOC,LED1_PIO_IDX_MASK); 
		delay_us(T);
	}
}
// CALLBACK
void but_callback(void){
  400b88:	b508      	push	{r3, lr}
	but_flag = 1;
  400b8a:	2201      	movs	r2, #1
  400b8c:	4b02      	ldr	r3, [pc, #8]	; (400b98 <but_callback+0x10>)
  400b8e:	701a      	strb	r2, [r3, #0]
	delay_ms(200);
  400b90:	4802      	ldr	r0, [pc, #8]	; (400b9c <but_callback+0x14>)
  400b92:	4b03      	ldr	r3, [pc, #12]	; (400ba0 <but_callback+0x18>)
  400b94:	4798      	blx	r3
  400b96:	bd08      	pop	{r3, pc}
  400b98:	20400d97 	.word	0x20400d97
  400b9c:	009a5649 	.word	0x009a5649
  400ba0:	20400001 	.word	0x20400001

00400ba4 <but1_callback>:
};
void but1_callback(void){
  400ba4:	b508      	push	{r3, lr}
	but1_flag = 1;
  400ba6:	2201      	movs	r2, #1
  400ba8:	4b02      	ldr	r3, [pc, #8]	; (400bb4 <but1_callback+0x10>)
  400baa:	701a      	strb	r2, [r3, #0]
	delay_ms(200);
  400bac:	4802      	ldr	r0, [pc, #8]	; (400bb8 <but1_callback+0x14>)
  400bae:	4b03      	ldr	r3, [pc, #12]	; (400bbc <but1_callback+0x18>)
  400bb0:	4798      	blx	r3
  400bb2:	bd08      	pop	{r3, pc}
  400bb4:	20400d94 	.word	0x20400d94
  400bb8:	009a5649 	.word	0x009a5649
  400bbc:	20400001 	.word	0x20400001

00400bc0 <but2_callback>:
	};
void but2_callback(void){
  400bc0:	b508      	push	{r3, lr}
	but2_flag = 1;
  400bc2:	2201      	movs	r2, #1
  400bc4:	4b02      	ldr	r3, [pc, #8]	; (400bd0 <but2_callback+0x10>)
  400bc6:	701a      	strb	r2, [r3, #0]
	delay_ms(200);
  400bc8:	4802      	ldr	r0, [pc, #8]	; (400bd4 <but2_callback+0x14>)
  400bca:	4b03      	ldr	r3, [pc, #12]	; (400bd8 <but2_callback+0x18>)
  400bcc:	4798      	blx	r3
  400bce:	bd08      	pop	{r3, pc}
  400bd0:	20400d95 	.word	0x20400d95
  400bd4:	009a5649 	.word	0x009a5649
  400bd8:	20400001 	.word	0x20400001

00400bdc <but3_callback>:
};
void but3_callback(void){
  400bdc:	b508      	push	{r3, lr}
	but3_flag = 1;
  400bde:	2201      	movs	r2, #1
  400be0:	4b02      	ldr	r3, [pc, #8]	; (400bec <but3_callback+0x10>)
  400be2:	701a      	strb	r2, [r3, #0]
	delay_ms(200);
  400be4:	4802      	ldr	r0, [pc, #8]	; (400bf0 <but3_callback+0x14>)
  400be6:	4b03      	ldr	r3, [pc, #12]	; (400bf4 <but3_callback+0x18>)
  400be8:	4798      	blx	r3
  400bea:	bd08      	pop	{r3, pc}
  400bec:	20400d96 	.word	0x20400d96
  400bf0:	009a5649 	.word	0x009a5649
  400bf4:	20400001 	.word	0x20400001

00400bf8 <tone>:
void tone(int freq, int dur){
  400bf8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int T = 1000000/(2*freq);
  400bfc:	0043      	lsls	r3, r0, #1
  400bfe:	4a27      	ldr	r2, [pc, #156]	; (400c9c <tone+0xa4>)
  400c00:	fb92 f9f3 	sdiv	r9, r2, r3
	int idx = (dur * freq)/1000;
  400c04:	fb01 f800 	mul.w	r8, r1, r0
  400c08:	4925      	ldr	r1, [pc, #148]	; (400ca0 <tone+0xa8>)
  400c0a:	fb81 3108 	smull	r3, r1, r1, r8
  400c0e:	ea4f 78e8 	mov.w	r8, r8, asr #31
	for(int i = 0; i <= idx; i++){
  400c12:	ebd8 18a1 	rsbs	r8, r8, r1, asr #6
  400c16:	d43f      	bmi.n	400c98 <tone+0xa0>
		delay_us(T);                        
  400c18:	4c22      	ldr	r4, [pc, #136]	; (400ca4 <tone+0xac>)
  400c1a:	fba9 0104 	umull	r0, r1, r9, r4
  400c1e:	464a      	mov	r2, r9
  400c20:	17d3      	asrs	r3, r2, #31
  400c22:	fb04 1103 	mla	r1, r4, r3, r1
  400c26:	4a20      	ldr	r2, [pc, #128]	; (400ca8 <tone+0xb0>)
  400c28:	2300      	movs	r3, #0
  400c2a:	4c20      	ldr	r4, [pc, #128]	; (400cac <tone+0xb4>)
  400c2c:	2500      	movs	r5, #0
  400c2e:	1900      	adds	r0, r0, r4
  400c30:	4169      	adcs	r1, r5
  400c32:	4c1f      	ldr	r4, [pc, #124]	; (400cb0 <tone+0xb8>)
  400c34:	47a0      	blx	r4
  400c36:	4682      	mov	sl, r0
  400c38:	2400      	movs	r4, #0
		pio_set(PIOB, BUZ_PIO_IDX_MASK); 
  400c3a:	4f1e      	ldr	r7, [pc, #120]	; (400cb4 <tone+0xbc>)
  400c3c:	4e1e      	ldr	r6, [pc, #120]	; (400cb8 <tone+0xc0>)
		pio_clear(PIOC,LED1_PIO_IDX_MASK);   
  400c3e:	4d1f      	ldr	r5, [pc, #124]	; (400cbc <tone+0xc4>)
  400c40:	e010      	b.n	400c64 <tone+0x6c>
		delay_us(T);                        
  400c42:	2033      	movs	r0, #51	; 0x33
  400c44:	f8df b07c 	ldr.w	fp, [pc, #124]	; 400cc4 <tone+0xcc>
  400c48:	47d8      	blx	fp
		pio_clear(PIOB, BUZ_PIO_IDX_MASK);
  400c4a:	2104      	movs	r1, #4
  400c4c:	4638      	mov	r0, r7
  400c4e:	4b1c      	ldr	r3, [pc, #112]	; (400cc0 <tone+0xc8>)
  400c50:	4798      	blx	r3
		pio_set(PIOC,LED1_PIO_IDX_MASK); 
  400c52:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400c56:	4628      	mov	r0, r5
  400c58:	47b0      	blx	r6
		delay_us(T);
  400c5a:	2033      	movs	r0, #51	; 0x33
  400c5c:	47d8      	blx	fp
	for(int i = 0; i <= idx; i++){
  400c5e:	3401      	adds	r4, #1
  400c60:	45a0      	cmp	r8, r4
  400c62:	db19      	blt.n	400c98 <tone+0xa0>
		pio_set(PIOB, BUZ_PIO_IDX_MASK); 
  400c64:	2104      	movs	r1, #4
  400c66:	4638      	mov	r0, r7
  400c68:	47b0      	blx	r6
		pio_clear(PIOC,LED1_PIO_IDX_MASK);   
  400c6a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400c6e:	4628      	mov	r0, r5
  400c70:	4b13      	ldr	r3, [pc, #76]	; (400cc0 <tone+0xc8>)
  400c72:	4798      	blx	r3
		delay_us(T);                        
  400c74:	f1b9 0f00 	cmp.w	r9, #0
  400c78:	d0e3      	beq.n	400c42 <tone+0x4a>
  400c7a:	4650      	mov	r0, sl
  400c7c:	f8df b044 	ldr.w	fp, [pc, #68]	; 400cc4 <tone+0xcc>
  400c80:	47d8      	blx	fp
		pio_clear(PIOB, BUZ_PIO_IDX_MASK);
  400c82:	2104      	movs	r1, #4
  400c84:	4638      	mov	r0, r7
  400c86:	4b0e      	ldr	r3, [pc, #56]	; (400cc0 <tone+0xc8>)
  400c88:	4798      	blx	r3
		pio_set(PIOC,LED1_PIO_IDX_MASK); 
  400c8a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400c8e:	4628      	mov	r0, r5
  400c90:	47b0      	blx	r6
		delay_us(T);
  400c92:	4650      	mov	r0, sl
  400c94:	47d8      	blx	fp
  400c96:	e7e2      	b.n	400c5e <tone+0x66>
  400c98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400c9c:	000f4240 	.word	0x000f4240
  400ca0:	10624dd3 	.word	0x10624dd3
  400ca4:	11e1a300 	.word	0x11e1a300
  400ca8:	005a83e0 	.word	0x005a83e0
  400cac:	005a83df 	.word	0x005a83df
  400cb0:	00400ffd 	.word	0x00400ffd
  400cb4:	400e1000 	.word	0x400e1000
  400cb8:	0040021d 	.word	0x0040021d
  400cbc:	400e1200 	.word	0x400e1200
  400cc0:	00400221 	.word	0x00400221
  400cc4:	20400001 	.word	0x20400001

00400cc8 <init>:
};



// Função de inicialização do uC
void init(void){
  400cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400ccc:	b082      	sub	sp, #8
	// Initialize the board clock
	sysclk_init();
  400cce:	4b50      	ldr	r3, [pc, #320]	; (400e10 <init+0x148>)
  400cd0:	4798      	blx	r3

	// Desativa WatchDog Timer
	WDT->WDT_MR = WDT_MR_WDDIS;
  400cd2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400cd6:	4b4f      	ldr	r3, [pc, #316]	; (400e14 <init+0x14c>)
  400cd8:	605a      	str	r2, [r3, #4]
	
	// Ativa o PIO na qual o LED foi conectado
	// para que possamos controlar o LED.
	pmc_enable_periph_clk(BUZ_PIO_ID);
  400cda:	200b      	movs	r0, #11
  400cdc:	4c4e      	ldr	r4, [pc, #312]	; (400e18 <init+0x150>)
  400cde:	47a0      	blx	r4
	pmc_enable_periph_clk(LED_PIO_ID);
  400ce0:	200c      	movs	r0, #12
  400ce2:	47a0      	blx	r4
	pmc_enable_periph_clk(LED1_PIO_ID);
  400ce4:	200c      	movs	r0, #12
  400ce6:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_PIO_ID);
  400ce8:	2010      	movs	r0, #16
  400cea:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_PIO_ID);
  400cec:	2010      	movs	r0, #16
  400cee:	47a0      	blx	r4
	
	pio_configure(LED1_PIO, PIO_OUTPUT_0, LED1_PIO_IDX_MASK, PIO_DEFAULT);
  400cf0:	4e4a      	ldr	r6, [pc, #296]	; (400e1c <init+0x154>)
  400cf2:	2300      	movs	r3, #0
  400cf4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  400cf8:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400cfc:	4630      	mov	r0, r6
  400cfe:	4d48      	ldr	r5, [pc, #288]	; (400e20 <init+0x158>)
  400d00:	47a8      	blx	r5
	pio_configure(LED2_PIO, PIO_OUTPUT_0, LED2_PIO_IDX_MASK, PIO_DEFAULT);
  400d02:	4f48      	ldr	r7, [pc, #288]	; (400e24 <init+0x15c>)
  400d04:	2300      	movs	r3, #0
  400d06:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400d0a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400d0e:	4638      	mov	r0, r7
  400d10:	47a8      	blx	r5
	pio_configure(LED3_PIO, PIO_OUTPUT_0, LED3_PIO_IDX_MASK, PIO_DEFAULT);
  400d12:	2300      	movs	r3, #0
  400d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d18:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400d1c:	4638      	mov	r0, r7
  400d1e:	47a8      	blx	r5
	pio_configure(LED_PIO , PIO_OUTPUT_0, LED_PIO_IDX_MASK, PIO_DEFAULT);
  400d20:	2300      	movs	r3, #0
  400d22:	f44f 7280 	mov.w	r2, #256	; 0x100
  400d26:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
  400d2a:	4630      	mov	r0, r6
  400d2c:	47a8      	blx	r5
	
	pio_set_output(BUZ_PIO, BUZ_PIO_IDX_MASK, 0, 0, 0);
  400d2e:	2200      	movs	r2, #0
  400d30:	9200      	str	r2, [sp, #0]
  400d32:	4613      	mov	r3, r2
  400d34:	2104      	movs	r1, #4
  400d36:	483c      	ldr	r0, [pc, #240]	; (400e28 <init+0x160>)
  400d38:	f8df 8110 	ldr.w	r8, [pc, #272]	; 400e4c <init+0x184>
  400d3c:	47c0      	blx	r8
	
	// Inicializa PIO do botao
	pmc_enable_periph_clk(BUT_PIO_ID);
  400d3e:	200a      	movs	r0, #10
  400d40:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT1_PIO_ID);
  400d42:	200a      	movs	r0, #10
  400d44:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT2_PIO_ID);
  400d46:	2010      	movs	r0, #16
  400d48:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT3_PIO_ID);
  400d4a:	200c      	movs	r0, #12
  400d4c:	47a0      	blx	r4
	
	pio_configure(BUT_PIO , PIO_INPUT, BUT_PIO_IDX_MASK, PIO_PULLUP);
  400d4e:	4c37      	ldr	r4, [pc, #220]	; (400e2c <init+0x164>)
  400d50:	2301      	movs	r3, #1
  400d52:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d56:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400d5a:	4620      	mov	r0, r4
  400d5c:	47a8      	blx	r5
	pio_configure(BUT1_PIO, PIO_INPUT, BUT_PIO_IDX_MASK, PIO_PULLUP);
  400d5e:	2301      	movs	r3, #1
  400d60:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d64:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400d68:	4620      	mov	r0, r4
  400d6a:	47a8      	blx	r5
	pio_configure(BUT2_PIO, PIO_INPUT, BUT_PIO_IDX_MASK, PIO_PULLUP);
  400d6c:	2301      	movs	r3, #1
  400d6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d72:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400d76:	4638      	mov	r0, r7
  400d78:	47a8      	blx	r5
	pio_configure(BUT3_PIO, PIO_INPUT, BUT_PIO_IDX_MASK, PIO_PULLUP);
  400d7a:	2301      	movs	r3, #1
  400d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d80:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  400d84:	4630      	mov	r0, r6
  400d86:	47a8      	blx	r5
	
	
	pio_handler_set(BUT_PIO , BUT_PIO_ID, BUT_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but_callback);	
  400d88:	4b29      	ldr	r3, [pc, #164]	; (400e30 <init+0x168>)
  400d8a:	9300      	str	r3, [sp, #0]
  400d8c:	2350      	movs	r3, #80	; 0x50
  400d8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  400d92:	210a      	movs	r1, #10
  400d94:	4620      	mov	r0, r4
  400d96:	4d27      	ldr	r5, [pc, #156]	; (400e34 <init+0x16c>)
  400d98:	47a8      	blx	r5
	pio_handler_set(BUT1_PIO, BUT1_PIO_ID, BUT1_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but1_callback);	
  400d9a:	4b27      	ldr	r3, [pc, #156]	; (400e38 <init+0x170>)
  400d9c:	9300      	str	r3, [sp, #0]
  400d9e:	2350      	movs	r3, #80	; 0x50
  400da0:	2204      	movs	r2, #4
  400da2:	210a      	movs	r1, #10
  400da4:	4620      	mov	r0, r4
  400da6:	47a8      	blx	r5
	pio_handler_set(BUT2_PIO, BUT2_PIO_ID, BUT2_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but2_callback);	
  400da8:	4b24      	ldr	r3, [pc, #144]	; (400e3c <init+0x174>)
  400daa:	9300      	str	r3, [sp, #0]
  400dac:	2350      	movs	r3, #80	; 0x50
  400dae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  400db2:	2110      	movs	r1, #16
  400db4:	4638      	mov	r0, r7
  400db6:	47a8      	blx	r5
	pio_handler_set(BUT3_PIO, BUT3_PIO_ID, BUT3_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but3_callback);	
  400db8:	4b21      	ldr	r3, [pc, #132]	; (400e40 <init+0x178>)
  400dba:	9300      	str	r3, [sp, #0]
  400dbc:	2350      	movs	r3, #80	; 0x50
  400dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  400dc2:	210c      	movs	r1, #12
  400dc4:	4630      	mov	r0, r6
  400dc6:	47a8      	blx	r5
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400dc8:	4b1e      	ldr	r3, [pc, #120]	; (400e44 <init+0x17c>)
  400dca:	f44f 6180 	mov.w	r1, #1024	; 0x400
  400dce:	6019      	str	r1, [r3, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400dd0:	2280      	movs	r2, #128	; 0x80
  400dd2:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400dd6:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400dd8:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400ddc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
  400de0:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400de2:	f883 2310 	strb.w	r2, [r3, #784]	; 0x310
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  400de6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  400dea:	6019      	str	r1, [r3, #0]
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  400dec:	f883 230c 	strb.w	r2, [r3, #780]	; 0x30c
	NVIC_SetPriority(BUT2_PIO_ID, 4);
	
	NVIC_EnableIRQ(BUT3_PIO_ID);
	NVIC_SetPriority(BUT3_PIO_ID, 4);
	
	pio_enable_interrupt(BUT1_PIO, BUT1_PIO_IDX_MASK);
  400df0:	2104      	movs	r1, #4
  400df2:	4620      	mov	r0, r4
  400df4:	4c14      	ldr	r4, [pc, #80]	; (400e48 <init+0x180>)
  400df6:	47a0      	blx	r4
	pio_enable_interrupt(BUT2_PIO, BUT2_PIO_IDX_MASK);
  400df8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  400dfc:	4638      	mov	r0, r7
  400dfe:	47a0      	blx	r4
	pio_enable_interrupt(BUT3_PIO, BUT3_PIO_IDX_MASK);
  400e00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  400e04:	4630      	mov	r0, r6
  400e06:	47a0      	blx	r4
}
  400e08:	b002      	add	sp, #8
  400e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400e0e:	bf00      	nop
  400e10:	004001ad 	.word	0x004001ad
  400e14:	400e1850 	.word	0x400e1850
  400e18:	00400629 	.word	0x00400629
  400e1c:	400e1200 	.word	0x400e1200
  400e20:	00400315 	.word	0x00400315
  400e24:	400e1400 	.word	0x400e1400
  400e28:	400e1000 	.word	0x400e1000
  400e2c:	400e0e00 	.word	0x400e0e00
  400e30:	00400b89 	.word	0x00400b89
  400e34:	00400435 	.word	0x00400435
  400e38:	00400ba5 	.word	0x00400ba5
  400e3c:	00400bc1 	.word	0x00400bc1
  400e40:	00400bdd 	.word	0x00400bdd
  400e44:	e000e100 	.word	0xe000e100
  400e48:	004003d7 	.word	0x004003d7
  400e4c:	004002ed 	.word	0x004002ed

00400e50 <main>:

int main(void) {
  400e50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  400e54:	b08c      	sub	sp, #48	; 0x30
	underworld.len = sizeof(underworld_melody)/sizeof(underworld_melody[0]);
	underworld.notas = &underworld_melody;
	underworld.nome = "Underworld";
	underworld.time = &underworld_tempo;

	musica lista_de_musicas[] = {pirate, imperial, underworld};
  400e56:	23cb      	movs	r3, #203	; 0xcb
  400e58:	9300      	str	r3, [sp, #0]
  400e5a:	4b50      	ldr	r3, [pc, #320]	; (400f9c <main+0x14c>)
  400e5c:	9301      	str	r3, [sp, #4]
  400e5e:	4b50      	ldr	r3, [pc, #320]	; (400fa0 <main+0x150>)
  400e60:	9302      	str	r3, [sp, #8]
  400e62:	4b50      	ldr	r3, [pc, #320]	; (400fa4 <main+0x154>)
  400e64:	9303      	str	r3, [sp, #12]
  400e66:	2314      	movs	r3, #20
  400e68:	9304      	str	r3, [sp, #16]
  400e6a:	4b4f      	ldr	r3, [pc, #316]	; (400fa8 <main+0x158>)
  400e6c:	9305      	str	r3, [sp, #20]
  400e6e:	4b4f      	ldr	r3, [pc, #316]	; (400fac <main+0x15c>)
  400e70:	9306      	str	r3, [sp, #24]
  400e72:	4b4f      	ldr	r3, [pc, #316]	; (400fb0 <main+0x160>)
  400e74:	9307      	str	r3, [sp, #28]
  400e76:	2338      	movs	r3, #56	; 0x38
  400e78:	9308      	str	r3, [sp, #32]
  400e7a:	4b4e      	ldr	r3, [pc, #312]	; (400fb4 <main+0x164>)
  400e7c:	9309      	str	r3, [sp, #36]	; 0x24
  400e7e:	4b4e      	ldr	r3, [pc, #312]	; (400fb8 <main+0x168>)
  400e80:	930a      	str	r3, [sp, #40]	; 0x28
  400e82:	4b4e      	ldr	r3, [pc, #312]	; (400fbc <main+0x16c>)
  400e84:	930b      	str	r3, [sp, #44]	; 0x2c



	init();
  400e86:	4b4e      	ldr	r3, [pc, #312]	; (400fc0 <main+0x170>)
  400e88:	4798      	blx	r3
	int i = 0;
	int music_idx = 0;
	pio_set(LED1_PIO, LED1_PIO_IDX_MASK);
  400e8a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400e8e:	484d      	ldr	r0, [pc, #308]	; (400fc4 <main+0x174>)
  400e90:	4c4d      	ldr	r4, [pc, #308]	; (400fc8 <main+0x178>)
  400e92:	47a0      	blx	r4
	pio_set(LED2_PIO, LED2_PIO_IDX_MASK);
  400e94:	4d4d      	ldr	r5, [pc, #308]	; (400fcc <main+0x17c>)
  400e96:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400e9a:	4628      	mov	r0, r5
  400e9c:	47a0      	blx	r4
	pio_set(LED3_PIO, LED3_PIO_IDX_MASK);
  400e9e:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400ea2:	4628      	mov	r0, r5
  400ea4:	47a0      	blx	r4
	int music_idx = 0;
  400ea6:	2500      	movs	r5, #0
	int i = 0;
  400ea8:	462c      	mov	r4, r5
	while (1) {
		if(pause){
  400eaa:	4e49      	ldr	r6, [pc, #292]	; (400fd0 <main+0x180>)
			pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);	
  400eac:	f8df a140 	ldr.w	sl, [pc, #320]	; 400ff0 <main+0x1a0>
			}
			int adj = 2;
			int wait = lista_de_musicas[music_idx].time[i] * songspeed/adj;
				
			tone(lista_de_musicas[music_idx].notas[i],lista_de_musicas[music_idx].time[i]/adj);
			delay_ms(wait);
  400eb0:	4f48      	ldr	r7, [pc, #288]	; (400fd4 <main+0x184>)
  400eb2:	e00d      	b.n	400ed0 <main+0x80>
			pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);	
  400eb4:	2002      	movs	r0, #2
  400eb6:	47d0      	blx	sl
  400eb8:	e00d      	b.n	400ed6 <main+0x86>
			delay_ms(wait);
  400eba:	2033      	movs	r0, #51	; 0x33
  400ebc:	f8df 8134 	ldr.w	r8, [pc, #308]	; 400ff4 <main+0x1a4>
  400ec0:	47c0      	blx	r8
			pio_clear(PIOB, BUZ_PIO_IDX_MASK);
  400ec2:	2104      	movs	r1, #4
  400ec4:	4844      	ldr	r0, [pc, #272]	; (400fd8 <main+0x188>)
  400ec6:	4b45      	ldr	r3, [pc, #276]	; (400fdc <main+0x18c>)
  400ec8:	4798      	blx	r3
			delay_ms(wait);
  400eca:	2033      	movs	r0, #51	; 0x33
  400ecc:	47c0      	blx	r8
				
			i++;
  400ece:	3401      	adds	r4, #1
		if(pause){
  400ed0:	7833      	ldrb	r3, [r6, #0]
  400ed2:	2b00      	cmp	r3, #0
  400ed4:	d1ee      	bne.n	400eb4 <main+0x64>
		if(but2_flag) {
  400ed6:	4b42      	ldr	r3, [pc, #264]	; (400fe0 <main+0x190>)
  400ed8:	781b      	ldrb	r3, [r3, #0]
  400eda:	b13b      	cbz	r3, 400eec <main+0x9c>
			pause = !pause;
  400edc:	7833      	ldrb	r3, [r6, #0]
  400ede:	fab3 f383 	clz	r3, r3
  400ee2:	095b      	lsrs	r3, r3, #5
  400ee4:	7033      	strb	r3, [r6, #0]
			but2_flag = 0;	
  400ee6:	2200      	movs	r2, #0
  400ee8:	4b3d      	ldr	r3, [pc, #244]	; (400fe0 <main+0x190>)
  400eea:	701a      	strb	r2, [r3, #0]
		if(but1_flag){
  400eec:	4b3d      	ldr	r3, [pc, #244]	; (400fe4 <main+0x194>)
  400eee:	781b      	ldrb	r3, [r3, #0]
  400ef0:	b133      	cbz	r3, 400f00 <main+0xb0>
			music_idx--;
  400ef2:	3d01      	subs	r5, #1
			if (music_idx<=-1) music_idx = NMUS-1;
  400ef4:	2d00      	cmp	r5, #0
  400ef6:	bfb8      	it	lt
  400ef8:	2502      	movlt	r5, #2
			but1_flag = 0;
  400efa:	2400      	movs	r4, #0
  400efc:	4b39      	ldr	r3, [pc, #228]	; (400fe4 <main+0x194>)
  400efe:	701c      	strb	r4, [r3, #0]
		if(but3_flag){
  400f00:	4b39      	ldr	r3, [pc, #228]	; (400fe8 <main+0x198>)
  400f02:	781b      	ldrb	r3, [r3, #0]
  400f04:	b133      	cbz	r3, 400f14 <main+0xc4>
			music_idx++;
  400f06:	3501      	adds	r5, #1
			if (music_idx>=NMUS) music_idx = 0;
  400f08:	2d03      	cmp	r5, #3
  400f0a:	bfa8      	it	ge
  400f0c:	2500      	movge	r5, #0
			but3_flag = 0;
  400f0e:	2400      	movs	r4, #0
  400f10:	4b35      	ldr	r3, [pc, #212]	; (400fe8 <main+0x198>)
  400f12:	701c      	strb	r4, [r3, #0]
		if(!pause){
  400f14:	7833      	ldrb	r3, [r6, #0]
  400f16:	2b00      	cmp	r3, #0
  400f18:	d1da      	bne.n	400ed0 <main+0x80>
			if (i>(lista_de_musicas[music_idx].len-1)){
  400f1a:	ab0c      	add	r3, sp, #48	; 0x30
  400f1c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
  400f20:	f853 3c30 	ldr.w	r3, [r3, #-48]
  400f24:	3b01      	subs	r3, #1
				i = 0;
  400f26:	429c      	cmp	r4, r3
  400f28:	bfc8      	it	gt
  400f2a:	2400      	movgt	r4, #0
			int wait = lista_de_musicas[music_idx].time[i] * songspeed/adj;
  400f2c:	00a3      	lsls	r3, r4, #2
  400f2e:	aa0c      	add	r2, sp, #48	; 0x30
  400f30:	eb02 1205 	add.w	r2, r2, r5, lsl #4
  400f34:	f852 2c28 	ldr.w	r2, [r2, #-40]
  400f38:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
  400f3c:	2800      	cmp	r0, #0
  400f3e:	bfb8      	it	lt
  400f40:	3001      	addlt	r0, #1
  400f42:	ea4f 0860 	mov.w	r8, r0, asr #1
			tone(lista_de_musicas[music_idx].notas[i],lista_de_musicas[music_idx].time[i]/adj);
  400f46:	aa0c      	add	r2, sp, #48	; 0x30
  400f48:	eb02 1205 	add.w	r2, r2, r5, lsl #4
  400f4c:	f852 2c2c 	ldr.w	r2, [r2, #-44]
  400f50:	4641      	mov	r1, r8
  400f52:	58d0      	ldr	r0, [r2, r3]
  400f54:	4b25      	ldr	r3, [pc, #148]	; (400fec <main+0x19c>)
  400f56:	4798      	blx	r3
			delay_ms(wait);
  400f58:	f1b8 0f00 	cmp.w	r8, #0
  400f5c:	d0ad      	beq.n	400eba <main+0x6a>
  400f5e:	4642      	mov	r2, r8
  400f60:	17d3      	asrs	r3, r2, #31
  400f62:	fba8 0107 	umull	r0, r1, r8, r7
  400f66:	fb07 1103 	mla	r1, r7, r3, r1
  400f6a:	f241 722c 	movw	r2, #5932	; 0x172c
  400f6e:	2300      	movs	r3, #0
  400f70:	f241 782b 	movw	r8, #5931	; 0x172b
  400f74:	f04f 0900 	mov.w	r9, #0
  400f78:	eb10 0008 	adds.w	r0, r0, r8
  400f7c:	eb41 0109 	adc.w	r1, r1, r9
  400f80:	f8df 8074 	ldr.w	r8, [pc, #116]	; 400ff8 <main+0x1a8>
  400f84:	47c0      	blx	r8
  400f86:	4681      	mov	r9, r0
  400f88:	f8df 8068 	ldr.w	r8, [pc, #104]	; 400ff4 <main+0x1a4>
  400f8c:	47c0      	blx	r8
			pio_clear(PIOB, BUZ_PIO_IDX_MASK);
  400f8e:	2104      	movs	r1, #4
  400f90:	4811      	ldr	r0, [pc, #68]	; (400fd8 <main+0x188>)
  400f92:	4b12      	ldr	r3, [pc, #72]	; (400fdc <main+0x18c>)
  400f94:	4798      	blx	r3
			delay_ms(wait);
  400f96:	4648      	mov	r0, r9
  400f98:	47c0      	blx	r8
  400f9a:	e798      	b.n	400ece <main+0x7e>
  400f9c:	204000b4 	.word	0x204000b4
  400fa0:	204003e0 	.word	0x204003e0
  400fa4:	0040147c 	.word	0x0040147c
  400fa8:	20400010 	.word	0x20400010
  400fac:	20400060 	.word	0x20400060
  400fb0:	00401484 	.word	0x00401484
  400fb4:	2040070c 	.word	0x2040070c
  400fb8:	204007ec 	.word	0x204007ec
  400fbc:	00401490 	.word	0x00401490
  400fc0:	00400cc9 	.word	0x00400cc9
  400fc4:	400e1200 	.word	0x400e1200
  400fc8:	0040021d 	.word	0x0040021d
  400fcc:	400e1400 	.word	0x400e1400
  400fd0:	204000b0 	.word	0x204000b0
  400fd4:	11e1a300 	.word	0x11e1a300
  400fd8:	400e1000 	.word	0x400e1000
  400fdc:	00400221 	.word	0x00400221
  400fe0:	20400d95 	.word	0x20400d95
  400fe4:	20400d94 	.word	0x20400d94
  400fe8:	20400d96 	.word	0x20400d96
  400fec:	00400bf9 	.word	0x00400bf9
  400ff0:	004006cd 	.word	0x004006cd
  400ff4:	20400001 	.word	0x20400001
  400ff8:	00400ffd 	.word	0x00400ffd

00400ffc <__aeabi_uldivmod>:
  400ffc:	b953      	cbnz	r3, 401014 <__aeabi_uldivmod+0x18>
  400ffe:	b94a      	cbnz	r2, 401014 <__aeabi_uldivmod+0x18>
  401000:	2900      	cmp	r1, #0
  401002:	bf08      	it	eq
  401004:	2800      	cmpeq	r0, #0
  401006:	bf1c      	itt	ne
  401008:	f04f 31ff 	movne.w	r1, #4294967295
  40100c:	f04f 30ff 	movne.w	r0, #4294967295
  401010:	f000 b97a 	b.w	401308 <__aeabi_idiv0>
  401014:	f1ad 0c08 	sub.w	ip, sp, #8
  401018:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  40101c:	f000 f806 	bl	40102c <__udivmoddi4>
  401020:	f8dd e004 	ldr.w	lr, [sp, #4]
  401024:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  401028:	b004      	add	sp, #16
  40102a:	4770      	bx	lr

0040102c <__udivmoddi4>:
  40102c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  401030:	468c      	mov	ip, r1
  401032:	460d      	mov	r5, r1
  401034:	4604      	mov	r4, r0
  401036:	9e08      	ldr	r6, [sp, #32]
  401038:	2b00      	cmp	r3, #0
  40103a:	d151      	bne.n	4010e0 <__udivmoddi4+0xb4>
  40103c:	428a      	cmp	r2, r1
  40103e:	4617      	mov	r7, r2
  401040:	d96d      	bls.n	40111e <__udivmoddi4+0xf2>
  401042:	fab2 fe82 	clz	lr, r2
  401046:	f1be 0f00 	cmp.w	lr, #0
  40104a:	d00b      	beq.n	401064 <__udivmoddi4+0x38>
  40104c:	f1ce 0c20 	rsb	ip, lr, #32
  401050:	fa01 f50e 	lsl.w	r5, r1, lr
  401054:	fa20 fc0c 	lsr.w	ip, r0, ip
  401058:	fa02 f70e 	lsl.w	r7, r2, lr
  40105c:	ea4c 0c05 	orr.w	ip, ip, r5
  401060:	fa00 f40e 	lsl.w	r4, r0, lr
  401064:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401068:	0c25      	lsrs	r5, r4, #16
  40106a:	fbbc f8fa 	udiv	r8, ip, sl
  40106e:	fa1f f987 	uxth.w	r9, r7
  401072:	fb0a cc18 	mls	ip, sl, r8, ip
  401076:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  40107a:	fb08 f309 	mul.w	r3, r8, r9
  40107e:	42ab      	cmp	r3, r5
  401080:	d90a      	bls.n	401098 <__udivmoddi4+0x6c>
  401082:	19ed      	adds	r5, r5, r7
  401084:	f108 32ff 	add.w	r2, r8, #4294967295
  401088:	f080 8123 	bcs.w	4012d2 <__udivmoddi4+0x2a6>
  40108c:	42ab      	cmp	r3, r5
  40108e:	f240 8120 	bls.w	4012d2 <__udivmoddi4+0x2a6>
  401092:	f1a8 0802 	sub.w	r8, r8, #2
  401096:	443d      	add	r5, r7
  401098:	1aed      	subs	r5, r5, r3
  40109a:	b2a4      	uxth	r4, r4
  40109c:	fbb5 f0fa 	udiv	r0, r5, sl
  4010a0:	fb0a 5510 	mls	r5, sl, r0, r5
  4010a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  4010a8:	fb00 f909 	mul.w	r9, r0, r9
  4010ac:	45a1      	cmp	r9, r4
  4010ae:	d909      	bls.n	4010c4 <__udivmoddi4+0x98>
  4010b0:	19e4      	adds	r4, r4, r7
  4010b2:	f100 33ff 	add.w	r3, r0, #4294967295
  4010b6:	f080 810a 	bcs.w	4012ce <__udivmoddi4+0x2a2>
  4010ba:	45a1      	cmp	r9, r4
  4010bc:	f240 8107 	bls.w	4012ce <__udivmoddi4+0x2a2>
  4010c0:	3802      	subs	r0, #2
  4010c2:	443c      	add	r4, r7
  4010c4:	eba4 0409 	sub.w	r4, r4, r9
  4010c8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  4010cc:	2100      	movs	r1, #0
  4010ce:	2e00      	cmp	r6, #0
  4010d0:	d061      	beq.n	401196 <__udivmoddi4+0x16a>
  4010d2:	fa24 f40e 	lsr.w	r4, r4, lr
  4010d6:	2300      	movs	r3, #0
  4010d8:	6034      	str	r4, [r6, #0]
  4010da:	6073      	str	r3, [r6, #4]
  4010dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4010e0:	428b      	cmp	r3, r1
  4010e2:	d907      	bls.n	4010f4 <__udivmoddi4+0xc8>
  4010e4:	2e00      	cmp	r6, #0
  4010e6:	d054      	beq.n	401192 <__udivmoddi4+0x166>
  4010e8:	2100      	movs	r1, #0
  4010ea:	e886 0021 	stmia.w	r6, {r0, r5}
  4010ee:	4608      	mov	r0, r1
  4010f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4010f4:	fab3 f183 	clz	r1, r3
  4010f8:	2900      	cmp	r1, #0
  4010fa:	f040 808e 	bne.w	40121a <__udivmoddi4+0x1ee>
  4010fe:	42ab      	cmp	r3, r5
  401100:	d302      	bcc.n	401108 <__udivmoddi4+0xdc>
  401102:	4282      	cmp	r2, r0
  401104:	f200 80fa 	bhi.w	4012fc <__udivmoddi4+0x2d0>
  401108:	1a84      	subs	r4, r0, r2
  40110a:	eb65 0503 	sbc.w	r5, r5, r3
  40110e:	2001      	movs	r0, #1
  401110:	46ac      	mov	ip, r5
  401112:	2e00      	cmp	r6, #0
  401114:	d03f      	beq.n	401196 <__udivmoddi4+0x16a>
  401116:	e886 1010 	stmia.w	r6, {r4, ip}
  40111a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40111e:	b912      	cbnz	r2, 401126 <__udivmoddi4+0xfa>
  401120:	2701      	movs	r7, #1
  401122:	fbb7 f7f2 	udiv	r7, r7, r2
  401126:	fab7 fe87 	clz	lr, r7
  40112a:	f1be 0f00 	cmp.w	lr, #0
  40112e:	d134      	bne.n	40119a <__udivmoddi4+0x16e>
  401130:	1beb      	subs	r3, r5, r7
  401132:	0c3a      	lsrs	r2, r7, #16
  401134:	fa1f fc87 	uxth.w	ip, r7
  401138:	2101      	movs	r1, #1
  40113a:	fbb3 f8f2 	udiv	r8, r3, r2
  40113e:	0c25      	lsrs	r5, r4, #16
  401140:	fb02 3318 	mls	r3, r2, r8, r3
  401144:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401148:	fb0c f308 	mul.w	r3, ip, r8
  40114c:	42ab      	cmp	r3, r5
  40114e:	d907      	bls.n	401160 <__udivmoddi4+0x134>
  401150:	19ed      	adds	r5, r5, r7
  401152:	f108 30ff 	add.w	r0, r8, #4294967295
  401156:	d202      	bcs.n	40115e <__udivmoddi4+0x132>
  401158:	42ab      	cmp	r3, r5
  40115a:	f200 80d1 	bhi.w	401300 <__udivmoddi4+0x2d4>
  40115e:	4680      	mov	r8, r0
  401160:	1aed      	subs	r5, r5, r3
  401162:	b2a3      	uxth	r3, r4
  401164:	fbb5 f0f2 	udiv	r0, r5, r2
  401168:	fb02 5510 	mls	r5, r2, r0, r5
  40116c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401170:	fb0c fc00 	mul.w	ip, ip, r0
  401174:	45a4      	cmp	ip, r4
  401176:	d907      	bls.n	401188 <__udivmoddi4+0x15c>
  401178:	19e4      	adds	r4, r4, r7
  40117a:	f100 33ff 	add.w	r3, r0, #4294967295
  40117e:	d202      	bcs.n	401186 <__udivmoddi4+0x15a>
  401180:	45a4      	cmp	ip, r4
  401182:	f200 80b8 	bhi.w	4012f6 <__udivmoddi4+0x2ca>
  401186:	4618      	mov	r0, r3
  401188:	eba4 040c 	sub.w	r4, r4, ip
  40118c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401190:	e79d      	b.n	4010ce <__udivmoddi4+0xa2>
  401192:	4631      	mov	r1, r6
  401194:	4630      	mov	r0, r6
  401196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  40119a:	f1ce 0420 	rsb	r4, lr, #32
  40119e:	fa05 f30e 	lsl.w	r3, r5, lr
  4011a2:	fa07 f70e 	lsl.w	r7, r7, lr
  4011a6:	fa20 f804 	lsr.w	r8, r0, r4
  4011aa:	0c3a      	lsrs	r2, r7, #16
  4011ac:	fa25 f404 	lsr.w	r4, r5, r4
  4011b0:	ea48 0803 	orr.w	r8, r8, r3
  4011b4:	fbb4 f1f2 	udiv	r1, r4, r2
  4011b8:	ea4f 4518 	mov.w	r5, r8, lsr #16
  4011bc:	fb02 4411 	mls	r4, r2, r1, r4
  4011c0:	fa1f fc87 	uxth.w	ip, r7
  4011c4:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  4011c8:	fb01 f30c 	mul.w	r3, r1, ip
  4011cc:	42ab      	cmp	r3, r5
  4011ce:	fa00 f40e 	lsl.w	r4, r0, lr
  4011d2:	d909      	bls.n	4011e8 <__udivmoddi4+0x1bc>
  4011d4:	19ed      	adds	r5, r5, r7
  4011d6:	f101 30ff 	add.w	r0, r1, #4294967295
  4011da:	f080 808a 	bcs.w	4012f2 <__udivmoddi4+0x2c6>
  4011de:	42ab      	cmp	r3, r5
  4011e0:	f240 8087 	bls.w	4012f2 <__udivmoddi4+0x2c6>
  4011e4:	3902      	subs	r1, #2
  4011e6:	443d      	add	r5, r7
  4011e8:	1aeb      	subs	r3, r5, r3
  4011ea:	fa1f f588 	uxth.w	r5, r8
  4011ee:	fbb3 f0f2 	udiv	r0, r3, r2
  4011f2:	fb02 3310 	mls	r3, r2, r0, r3
  4011f6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  4011fa:	fb00 f30c 	mul.w	r3, r0, ip
  4011fe:	42ab      	cmp	r3, r5
  401200:	d907      	bls.n	401212 <__udivmoddi4+0x1e6>
  401202:	19ed      	adds	r5, r5, r7
  401204:	f100 38ff 	add.w	r8, r0, #4294967295
  401208:	d26f      	bcs.n	4012ea <__udivmoddi4+0x2be>
  40120a:	42ab      	cmp	r3, r5
  40120c:	d96d      	bls.n	4012ea <__udivmoddi4+0x2be>
  40120e:	3802      	subs	r0, #2
  401210:	443d      	add	r5, r7
  401212:	1aeb      	subs	r3, r5, r3
  401214:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401218:	e78f      	b.n	40113a <__udivmoddi4+0x10e>
  40121a:	f1c1 0720 	rsb	r7, r1, #32
  40121e:	fa22 f807 	lsr.w	r8, r2, r7
  401222:	408b      	lsls	r3, r1
  401224:	fa05 f401 	lsl.w	r4, r5, r1
  401228:	ea48 0303 	orr.w	r3, r8, r3
  40122c:	fa20 fe07 	lsr.w	lr, r0, r7
  401230:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401234:	40fd      	lsrs	r5, r7
  401236:	ea4e 0e04 	orr.w	lr, lr, r4
  40123a:	fbb5 f9fc 	udiv	r9, r5, ip
  40123e:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401242:	fb0c 5519 	mls	r5, ip, r9, r5
  401246:	fa1f f883 	uxth.w	r8, r3
  40124a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  40124e:	fb09 f408 	mul.w	r4, r9, r8
  401252:	42ac      	cmp	r4, r5
  401254:	fa02 f201 	lsl.w	r2, r2, r1
  401258:	fa00 fa01 	lsl.w	sl, r0, r1
  40125c:	d908      	bls.n	401270 <__udivmoddi4+0x244>
  40125e:	18ed      	adds	r5, r5, r3
  401260:	f109 30ff 	add.w	r0, r9, #4294967295
  401264:	d243      	bcs.n	4012ee <__udivmoddi4+0x2c2>
  401266:	42ac      	cmp	r4, r5
  401268:	d941      	bls.n	4012ee <__udivmoddi4+0x2c2>
  40126a:	f1a9 0902 	sub.w	r9, r9, #2
  40126e:	441d      	add	r5, r3
  401270:	1b2d      	subs	r5, r5, r4
  401272:	fa1f fe8e 	uxth.w	lr, lr
  401276:	fbb5 f0fc 	udiv	r0, r5, ip
  40127a:	fb0c 5510 	mls	r5, ip, r0, r5
  40127e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401282:	fb00 f808 	mul.w	r8, r0, r8
  401286:	45a0      	cmp	r8, r4
  401288:	d907      	bls.n	40129a <__udivmoddi4+0x26e>
  40128a:	18e4      	adds	r4, r4, r3
  40128c:	f100 35ff 	add.w	r5, r0, #4294967295
  401290:	d229      	bcs.n	4012e6 <__udivmoddi4+0x2ba>
  401292:	45a0      	cmp	r8, r4
  401294:	d927      	bls.n	4012e6 <__udivmoddi4+0x2ba>
  401296:	3802      	subs	r0, #2
  401298:	441c      	add	r4, r3
  40129a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  40129e:	eba4 0408 	sub.w	r4, r4, r8
  4012a2:	fba0 8902 	umull	r8, r9, r0, r2
  4012a6:	454c      	cmp	r4, r9
  4012a8:	46c6      	mov	lr, r8
  4012aa:	464d      	mov	r5, r9
  4012ac:	d315      	bcc.n	4012da <__udivmoddi4+0x2ae>
  4012ae:	d012      	beq.n	4012d6 <__udivmoddi4+0x2aa>
  4012b0:	b156      	cbz	r6, 4012c8 <__udivmoddi4+0x29c>
  4012b2:	ebba 030e 	subs.w	r3, sl, lr
  4012b6:	eb64 0405 	sbc.w	r4, r4, r5
  4012ba:	fa04 f707 	lsl.w	r7, r4, r7
  4012be:	40cb      	lsrs	r3, r1
  4012c0:	431f      	orrs	r7, r3
  4012c2:	40cc      	lsrs	r4, r1
  4012c4:	6037      	str	r7, [r6, #0]
  4012c6:	6074      	str	r4, [r6, #4]
  4012c8:	2100      	movs	r1, #0
  4012ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  4012ce:	4618      	mov	r0, r3
  4012d0:	e6f8      	b.n	4010c4 <__udivmoddi4+0x98>
  4012d2:	4690      	mov	r8, r2
  4012d4:	e6e0      	b.n	401098 <__udivmoddi4+0x6c>
  4012d6:	45c2      	cmp	sl, r8
  4012d8:	d2ea      	bcs.n	4012b0 <__udivmoddi4+0x284>
  4012da:	ebb8 0e02 	subs.w	lr, r8, r2
  4012de:	eb69 0503 	sbc.w	r5, r9, r3
  4012e2:	3801      	subs	r0, #1
  4012e4:	e7e4      	b.n	4012b0 <__udivmoddi4+0x284>
  4012e6:	4628      	mov	r0, r5
  4012e8:	e7d7      	b.n	40129a <__udivmoddi4+0x26e>
  4012ea:	4640      	mov	r0, r8
  4012ec:	e791      	b.n	401212 <__udivmoddi4+0x1e6>
  4012ee:	4681      	mov	r9, r0
  4012f0:	e7be      	b.n	401270 <__udivmoddi4+0x244>
  4012f2:	4601      	mov	r1, r0
  4012f4:	e778      	b.n	4011e8 <__udivmoddi4+0x1bc>
  4012f6:	3802      	subs	r0, #2
  4012f8:	443c      	add	r4, r7
  4012fa:	e745      	b.n	401188 <__udivmoddi4+0x15c>
  4012fc:	4608      	mov	r0, r1
  4012fe:	e708      	b.n	401112 <__udivmoddi4+0xe6>
  401300:	f1a8 0802 	sub.w	r8, r8, #2
  401304:	443d      	add	r5, r7
  401306:	e72b      	b.n	401160 <__udivmoddi4+0x134>

00401308 <__aeabi_idiv0>:
  401308:	4770      	bx	lr
  40130a:	bf00      	nop

0040130c <__libc_init_array>:
  40130c:	b570      	push	{r4, r5, r6, lr}
  40130e:	4e0f      	ldr	r6, [pc, #60]	; (40134c <__libc_init_array+0x40>)
  401310:	4d0f      	ldr	r5, [pc, #60]	; (401350 <__libc_init_array+0x44>)
  401312:	1b76      	subs	r6, r6, r5
  401314:	10b6      	asrs	r6, r6, #2
  401316:	bf18      	it	ne
  401318:	2400      	movne	r4, #0
  40131a:	d005      	beq.n	401328 <__libc_init_array+0x1c>
  40131c:	3401      	adds	r4, #1
  40131e:	f855 3b04 	ldr.w	r3, [r5], #4
  401322:	4798      	blx	r3
  401324:	42a6      	cmp	r6, r4
  401326:	d1f9      	bne.n	40131c <__libc_init_array+0x10>
  401328:	4e0a      	ldr	r6, [pc, #40]	; (401354 <__libc_init_array+0x48>)
  40132a:	4d0b      	ldr	r5, [pc, #44]	; (401358 <__libc_init_array+0x4c>)
  40132c:	1b76      	subs	r6, r6, r5
  40132e:	f000 f8b7 	bl	4014a0 <_init>
  401332:	10b6      	asrs	r6, r6, #2
  401334:	bf18      	it	ne
  401336:	2400      	movne	r4, #0
  401338:	d006      	beq.n	401348 <__libc_init_array+0x3c>
  40133a:	3401      	adds	r4, #1
  40133c:	f855 3b04 	ldr.w	r3, [r5], #4
  401340:	4798      	blx	r3
  401342:	42a6      	cmp	r6, r4
  401344:	d1f9      	bne.n	40133a <__libc_init_array+0x2e>
  401346:	bd70      	pop	{r4, r5, r6, pc}
  401348:	bd70      	pop	{r4, r5, r6, pc}
  40134a:	bf00      	nop
  40134c:	004014ac 	.word	0x004014ac
  401350:	004014ac 	.word	0x004014ac
  401354:	004014b4 	.word	0x004014b4
  401358:	004014ac 	.word	0x004014ac

0040135c <register_fini>:
  40135c:	4b02      	ldr	r3, [pc, #8]	; (401368 <register_fini+0xc>)
  40135e:	b113      	cbz	r3, 401366 <register_fini+0xa>
  401360:	4802      	ldr	r0, [pc, #8]	; (40136c <register_fini+0x10>)
  401362:	f000 b805 	b.w	401370 <atexit>
  401366:	4770      	bx	lr
  401368:	00000000 	.word	0x00000000
  40136c:	0040137d 	.word	0x0040137d

00401370 <atexit>:
  401370:	2300      	movs	r3, #0
  401372:	4601      	mov	r1, r0
  401374:	461a      	mov	r2, r3
  401376:	4618      	mov	r0, r3
  401378:	f000 b81e 	b.w	4013b8 <__register_exitproc>

0040137c <__libc_fini_array>:
  40137c:	b538      	push	{r3, r4, r5, lr}
  40137e:	4c0a      	ldr	r4, [pc, #40]	; (4013a8 <__libc_fini_array+0x2c>)
  401380:	4d0a      	ldr	r5, [pc, #40]	; (4013ac <__libc_fini_array+0x30>)
  401382:	1b64      	subs	r4, r4, r5
  401384:	10a4      	asrs	r4, r4, #2
  401386:	d00a      	beq.n	40139e <__libc_fini_array+0x22>
  401388:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  40138c:	3b01      	subs	r3, #1
  40138e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401392:	3c01      	subs	r4, #1
  401394:	f855 3904 	ldr.w	r3, [r5], #-4
  401398:	4798      	blx	r3
  40139a:	2c00      	cmp	r4, #0
  40139c:	d1f9      	bne.n	401392 <__libc_fini_array+0x16>
  40139e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  4013a2:	f000 b887 	b.w	4014b4 <_fini>
  4013a6:	bf00      	nop
  4013a8:	004014c4 	.word	0x004014c4
  4013ac:	004014c0 	.word	0x004014c0

004013b0 <__retarget_lock_acquire_recursive>:
  4013b0:	4770      	bx	lr
  4013b2:	bf00      	nop

004013b4 <__retarget_lock_release_recursive>:
  4013b4:	4770      	bx	lr
  4013b6:	bf00      	nop

004013b8 <__register_exitproc>:
  4013b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  4013bc:	4d2c      	ldr	r5, [pc, #176]	; (401470 <__register_exitproc+0xb8>)
  4013be:	4606      	mov	r6, r0
  4013c0:	6828      	ldr	r0, [r5, #0]
  4013c2:	4698      	mov	r8, r3
  4013c4:	460f      	mov	r7, r1
  4013c6:	4691      	mov	r9, r2
  4013c8:	f7ff fff2 	bl	4013b0 <__retarget_lock_acquire_recursive>
  4013cc:	4b29      	ldr	r3, [pc, #164]	; (401474 <__register_exitproc+0xbc>)
  4013ce:	681c      	ldr	r4, [r3, #0]
  4013d0:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  4013d4:	2b00      	cmp	r3, #0
  4013d6:	d03e      	beq.n	401456 <__register_exitproc+0x9e>
  4013d8:	685a      	ldr	r2, [r3, #4]
  4013da:	2a1f      	cmp	r2, #31
  4013dc:	dc1c      	bgt.n	401418 <__register_exitproc+0x60>
  4013de:	f102 0e01 	add.w	lr, r2, #1
  4013e2:	b176      	cbz	r6, 401402 <__register_exitproc+0x4a>
  4013e4:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  4013e8:	2401      	movs	r4, #1
  4013ea:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  4013ee:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  4013f2:	4094      	lsls	r4, r2
  4013f4:	4320      	orrs	r0, r4
  4013f6:	2e02      	cmp	r6, #2
  4013f8:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  4013fc:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401400:	d023      	beq.n	40144a <__register_exitproc+0x92>
  401402:	3202      	adds	r2, #2
  401404:	f8c3 e004 	str.w	lr, [r3, #4]
  401408:	6828      	ldr	r0, [r5, #0]
  40140a:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  40140e:	f7ff ffd1 	bl	4013b4 <__retarget_lock_release_recursive>
  401412:	2000      	movs	r0, #0
  401414:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401418:	4b17      	ldr	r3, [pc, #92]	; (401478 <__register_exitproc+0xc0>)
  40141a:	b30b      	cbz	r3, 401460 <__register_exitproc+0xa8>
  40141c:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401420:	f3af 8000 	nop.w
  401424:	4603      	mov	r3, r0
  401426:	b1d8      	cbz	r0, 401460 <__register_exitproc+0xa8>
  401428:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  40142c:	6002      	str	r2, [r0, #0]
  40142e:	2100      	movs	r1, #0
  401430:	6041      	str	r1, [r0, #4]
  401432:	460a      	mov	r2, r1
  401434:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401438:	f04f 0e01 	mov.w	lr, #1
  40143c:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401440:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401444:	2e00      	cmp	r6, #0
  401446:	d0dc      	beq.n	401402 <__register_exitproc+0x4a>
  401448:	e7cc      	b.n	4013e4 <__register_exitproc+0x2c>
  40144a:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  40144e:	430c      	orrs	r4, r1
  401450:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401454:	e7d5      	b.n	401402 <__register_exitproc+0x4a>
  401456:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  40145a:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  40145e:	e7bb      	b.n	4013d8 <__register_exitproc+0x20>
  401460:	6828      	ldr	r0, [r5, #0]
  401462:	f7ff ffa7 	bl	4013b4 <__retarget_lock_release_recursive>
  401466:	f04f 30ff 	mov.w	r0, #4294967295
  40146a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  40146e:	bf00      	nop
  401470:	20400cf8 	.word	0x20400cf8
  401474:	0040149c 	.word	0x0040149c
  401478:	00000000 	.word	0x00000000
  40147c:	61726950 	.word	0x61726950
  401480:	00736174 	.word	0x00736174
  401484:	65706d49 	.word	0x65706d49
  401488:	6c616972 	.word	0x6c616972
  40148c:	00000000 	.word	0x00000000
  401490:	65646e55 	.word	0x65646e55
  401494:	726f7772 	.word	0x726f7772
  401498:	0000646c 	.word	0x0000646c

0040149c <_global_impure_ptr>:
  40149c:	204008d0                                ..@ 

004014a0 <_init>:
  4014a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4014a2:	bf00      	nop
  4014a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4014a6:	bc08      	pop	{r3}
  4014a8:	469e      	mov	lr, r3
  4014aa:	4770      	bx	lr

004014ac <__init_array_start>:
  4014ac:	0040135d 	.word	0x0040135d

004014b0 <__frame_dummy_init_array_entry>:
  4014b0:	00400165                                e.@.

004014b4 <_fini>:
  4014b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  4014b6:	bf00      	nop
  4014b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
  4014ba:	bc08      	pop	{r3}
  4014bc:	469e      	mov	lr, r3
  4014be:	4770      	bx	lr

004014c0 <__fini_array_start>:
  4014c0:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <imperial_march_notes>:
20400010:	01b8 0000 01b8 0000 01b8 0000 015d 0000     ............]...
20400020:	020b 0000 01b8 0000 015d 0000 020b 0000     ........].......
20400030:	01b8 0000 0000 0000 0293 0000 0293 0000     ................
20400040:	0293 0000 02ba 0000 020b 0000 019f 0000     ................
20400050:	015d 0000 020b 0000 01b8 0000 0000 0000     ]...............

20400060 <imperial_march_tempo>:
20400060:	01f4 0000 01f4 0000 01f4 0000 015e 0000     ............^...
20400070:	0096 0000 01f4 0000 015e 0000 0096 0000     ........^.......
20400080:	028a 0000 01f4 0000 01f4 0000 01f4 0000     ................
20400090:	01f4 0000 015e 0000 0096 0000 01f4 0000     ....^...........
204000a0:	015e 0000 0096 0000 028a 0000 01f4 0000     ^...............

204000b0 <pause>:
204000b0:	0001 0000                                   ....

204000b4 <pirate_notes>:
204000b4:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
204000c4:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
204000d4:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
204000e4:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
204000f4:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
20400104:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
20400114:	01b8 0000 01ee 0000 020b 0000 020b 0000     ................
20400124:	0000 0000 020b 0000 024b 0000 01ee 0000     ........K.......
20400134:	01ee 0000 0000 0000 01b8 0000 0188 0000     ................
20400144:	01b8 0000 0000 0000 014a 0000 0188 0000     ........J.......
20400154:	01b8 0000 01b8 0000 0000 0000 01b8 0000     ................
20400164:	020b 0000 024b 0000 024b 0000 0000 0000     ....K...K.......
20400174:	024b 0000 0293 0000 02ba 0000 02ba 0000     K...............
20400184:	0000 0000 0293 0000 024b 0000 0293 0000     ........K.......
20400194:	01b8 0000 0000 0000 01b8 0000 01ee 0000     ................
204001a4:	020b 0000 020b 0000 0000 0000 024b 0000     ............K...
204001b4:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
204001c4:	020b 0000 01ee 0000 01ee 0000 0000 0000     ................
204001d4:	020b 0000 01b8 0000 01ee 0000 0000 0000     ................
204001e4:	01b8 0000 01b8 0000 01b8 0000 01ee 0000     ................
204001f4:	020b 0000 020b 0000 0000 0000 020b 0000     ................
20400204:	024b 0000 01ee 0000 01ee 0000 0000 0000     K...............
20400214:	01b8 0000 0188 0000 01b8 0000 0000 0000     ................
20400224:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
20400234:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
20400244:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
20400254:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
20400264:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
20400274:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
20400284:	01b8 0000 020b 0000 024b 0000 024b 0000     ........K...K...
20400294:	0000 0000 024b 0000 0293 0000 02ba 0000     ....K...........
204002a4:	02ba 0000 0000 0000 0293 0000 024b 0000     ............K...
204002b4:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
204002c4:	01ee 0000 020b 0000 020b 0000 0000 0000     ................
204002d4:	024b 0000 0293 0000 01b8 0000 0000 0000     K...............
204002e4:	01b8 0000 020b 0000 01ee 0000 01ee 0000     ................
204002f4:	0000 0000 020b 0000 01b8 0000 01ee 0000     ................
20400304:	0000 0000 0293 0000 0000 0000 0000 0000     ................
20400314:	02ba 0000 0000 0000 0000 0000 0293 0000     ................
20400324:	0293 0000 0000 0000 0310 0000 0000 0000     ................
20400334:	0293 0000 024b 0000 0000 0000 0000 0000     ....K...........
20400344:	024b 0000 0000 0000 0000 0000 020b 0000     K...............
	...
2040035c:	01ee 0000 020b 0000 0000 0000 01ee 0000     ................
2040036c:	0000 0000 01b8 0000 0293 0000 0000 0000     ................
2040037c:	0000 0000 02ba 0000 0000 0000 0000 0000     ................
2040038c:	0293 0000 0293 0000 0000 0000 0310 0000     ................
2040039c:	0000 0000 0293 0000 024b 0000 0000 0000     ........K.......
204003ac:	0000 0000 024b 0000 0000 0000 0000 0000     ....K...........
204003bc:	020b 0000 0000 0000 0000 0000 01ee 0000     ................
204003cc:	020b 0000 0000 0000 01ee 0000 0000 0000     ................
204003dc:	01b8 0000                                   ....

204003e0 <pirate_tempo>:
204003e0:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204003f0:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400400:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400410:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400420:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
20400430:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400440:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400450:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400460:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400470:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
20400480:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400490:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204004a0:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204004b0:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204004c0:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204004d0:	00fa 0000 007d 0000 007d 0000 00fa 0000     ....}...}.......
204004e0:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204004f0:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400500:	007d 0000 007d 0000 0177 0000 0177 0000     }...}...w...w...
20400510:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400520:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400530:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400540:	007d 0000 007d 0000 0177 0000 007d 0000     }...}...w...}...
20400550:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400560:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400570:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400580:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400590:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
204005a0:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204005b0:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204005c0:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
204005d0:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204005e0:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204005f0:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400600:	00fa 0000 007d 0000 00fa 0000 007d 0000     ....}.......}...
20400610:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400620:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
20400630:	0177 0000 00fa 0000 007d 0000 0177 0000     w.......}...w...
20400640:	00fa 0000 007d 0000 0177 0000 007d 0000     ....}...w...}...
20400650:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400660:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
20400670:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
20400680:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
20400690:	007d 0000 007d 0000 007d 0000 01f4 0000     }...}...}.......
204006a0:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
204006b0:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
204006c0:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204006d0:	007d 0000 007d 0000 0177 0000 00fa 0000     }...}...w.......
204006e0:	007d 0000 0177 0000 00fa 0000 007d 0000     }...w.......}...
204006f0:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
20400700:	007d 0000 007d 0000 01f4 0000               }...}.......

2040070c <underworld_melody>:
2040070c:	0106 0000 020b 0000 00dc 0000 01b8 0000     ................
2040071c:	00e9 0000 01d2 0000 0000 0000 0000 0000     ................
2040072c:	0106 0000 020b 0000 00dc 0000 01b8 0000     ................
2040073c:	00e9 0000 01d2 0000 0000 0000 0000 0000     ................
2040074c:	00af 0000 015d 0000 0093 0000 0126 0000     ....].......&...
2040075c:	009c 0000 0137 0000 0000 0000 0000 0000     ....7...........
2040076c:	00af 0000 015d 0000 0093 0000 0126 0000     ....].......&...
2040077c:	009c 0000 0137 0000 0000 0000 0000 0000     ....7...........
2040078c:	0137 0000 0115 0000 0126 0000 0115 0000     7.......&.......
2040079c:	0137 0000 0137 0000 00d0 0000 00c4 0000     7...7...........
204007ac:	0115 0000 0106 0000 0172 0000 015d 0000     ........r...]...
204007bc:	00a5 0000 01d2 0000 01b8 0000 019f 0000     ................
204007cc:	0137 0000 00f7 0000 00e9 0000 00dc 0000     7...............
204007dc:	00d0 0000 0000 0000 0000 0000 0000 0000     ................

204007ec <underworld_tempo>:
204007ec:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
204007fc:	0053 0000 0053 0000 00a6 0000 014d 0000     S...S.......M...
2040080c:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
2040081c:	0053 0000 0053 0000 00a6 0000 014d 0000     S...S.......M...
2040082c:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
2040083c:	0053 0000 0053 0000 00a6 0000 014d 0000     S...S.......M...
2040084c:	0053 0000 0053 0000 0053 0000 0053 0000     S...S...S...S...
2040085c:	0053 0000 0053 0000 00a6 0000 00a6 0000     S...S...........
2040086c:	0037 0000 0037 0000 0037 0000 00a6 0000     7...7...7.......
2040087c:	00a6 0000 00a6 0000 00a6 0000 00a6 0000     ................
2040088c:	00a6 0000 0037 0000 0037 0000 0037 0000     ....7...7...7...
2040089c:	0037 0000 0037 0000 0037 0000 0064 0000     7...7...7...d...
204008ac:	0064 0000 0064 0000 0064 0000 0064 0000     d...d...d...d...
204008bc:	0064 0000 014d 0000 014d 0000 014d 0000     d...M...M...M...
204008cc:	0000 0000                                   ....

204008d0 <impure_data>:
204008d0:	0000 0000 0bbc 2040 0c24 2040 0c8c 2040     ......@ $.@ ..@ 
	...
20400978:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400988:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400cf8 <__atexit_recursive_mutex>:
20400cf8:	0d98 2040                                   ..@ 
